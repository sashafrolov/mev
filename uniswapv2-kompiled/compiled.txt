module ARRAY$SYNTAX [org.kframework.attributes.Location(Location(199,1,203,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ARRAY-SYMBOLIC$SYNTAX
  imports ARRAY-KORE$SYNTAX
endmodule


module ARRAY-IN-K$SYNTAX [org.kframework.attributes.Location(Location(132,1,179,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports LIST$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  imports ARRAY-SYNTAX$SYNTAX
  syntax List ::= "ensureOffsetList" "(" List "," Int "," KItem ")" [function, klabel(ensureOffsetList)]
  syntax Array ::= "makeArray" "(" Int "," KItem ")" [function, hook(ARRAY.make), klabel(makeArray)]
  syntax Array ::= "arr" "(" List "," Int "," KItem ")" [klabel(arr)]
endmodule


module ARRAY-KORE$SYNTAX [kore, org.kframework.attributes.Location(Location(195,1,197,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ARRAY-IN-K$SYNTAX
endmodule


module ARRAY-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(191,1,193,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports ARRAY-IN-K$SYNTAX
endmodule


module ARRAY-SYNTAX [org.kframework.attributes.Location(Location(67,1,130,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports LIST
  imports ARRAY-SYNTAX$SYNTAX
endmodule


module ARRAY-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(67,1,130,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports LIST$SYNTAX
  syntax KItem ::= Array "[" Int "]" [function, hook(ARRAY.lookup)]
  syntax KItem ::= Array
  syntax K
  syntax Bool ::= Int "in_keys" "(" Array ")" [function, functional, hook(ARRAY.in_keys)]
  syntax Bool ::= "isArray" "(" K ")" [function, predicate(Array)]
  syntax Array [element(_[_<-_]), hook(ARRAY.Array), org.kframework.attributes.Location(Location(70,3,70,69)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), unit(arrayCtor)]
  syntax Array ::= Array "[" Int "<-" KItem "]" [function, hook(ARRAY.update), klabel(_[_<-_]), symbol]
  syntax Array ::= Array "[" Int "<-" "undef" "]" [function, hook(ARRAY.remove)]
  syntax Array ::= "updateArray" "(" Array "," Int "," List ")" [function, hook(ARRAY.updateAll), klabel(updateArray)]
  syntax Array ::= "project:Array" "(" K ")" [function, projection]
  syntax Array ::= "fillArray" "(" Array "," Int "," Int "," KItem ")" [function, hook(ARRAY.fill), klabel(fillArray)]
  rule `project:Array`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module AUTO-CASTS [org.kframework.attributes.Location(Location(373,1,381,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports AUTO-CASTS$SYNTAX
endmodule


module AUTO-CASTS$SYNTAX [org.kframework.attributes.Location(Location(373,1,381,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module AUTO-FOLLOW [org.kframework.attributes.Location(Location(383,1,394,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports AUTO-FOLLOW$SYNTAX
endmodule


module AUTO-FOLLOW$SYNTAX [org.kframework.attributes.Location(Location(383,1,394,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module BASIC-K [org.kframework.attributes.Location(Location(35,1,41,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-BOOL
  imports ML-SYNTAX
  imports BASIC-K$SYNTAX
endmodule


module BASIC-K$SYNTAX [org.kframework.attributes.Location(Location(35,1,41,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-BOOL$SYNTAX
  imports ML-SYNTAX$SYNTAX
  syntax KItem [hook(K.KItem), org.kframework.attributes.Location(Location(38,3,38,30)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KConfigVar [org.kframework.attributes.Location(Location(40,3,40,27)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md)), token]
  syntax K ::= KItem
  syntax K
  syntax Bool ::= "isKConfigVar" "(" K ")" [function, predicate(KConfigVar)]
endmodule


module BOOL [not-lr1, org.kframework.attributes.Location(Location(786,1,860,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BOOL-SYNTAX
  imports BOOL$SYNTAX
  imports BASIC-K
  rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(53fc758ece1ff16581673016dfacc556cc30fcf6b3c35b586f001d76a1f9336c), contentStartColumn(8), contentStartLine(827), org.kframework.attributes.Location(Location(827,8,827,29)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(17ebc68421572b8ebe609c068fb49cbb6cbbe3246e2142257ad8befdda38f415), contentStartColumn(8), contentStartLine(828), org.kframework.attributes.Location(Location(828,8,828,29)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a6d91cd75cd777b0d4db536b3e4b20578e74fe650e644b55294da95fd2dba7f), contentStartColumn(8), contentStartLine(842), org.kframework.attributes.Location(Location(842,8,842,38)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7a2851f9d4ea4bd3f35070ee029fc3bdca36e361f7ee54addeff9d10ddeb7c75), contentStartColumn(8), contentStartLine(841), org.kframework.attributes.Location(Location(841,8,841,38)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(73513655c09a595907ab9d26d67e27f01d14a3435743b77000c02d10f35c05bf), contentStartColumn(8), contentStartLine(840), org.kframework.attributes.Location(Location(840,8,840,38)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c9eccff94ecf6e810c600d4536bf1701485c13c3456c6b98c0cdab0fe7c5af14), contentStartColumn(8), contentStartLine(850), org.kframework.attributes.Location(Location(850,8,850,33)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(684b0444a1f711d49ff1502423a3346fb26958697423db488b05d25081fc0480), contentStartColumn(8), contentStartLine(852), org.kframework.attributes.Location(Location(852,8,852,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#token("true","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(354bd0860c7f38b59e285c935fd2ea553ebddbabb4973342ad25f0dac6ea7bf6), contentStartColumn(8), contentStartLine(849), org.kframework.attributes.Location(Location(849,8,849,33)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(eb8c85dac19a5951f694b65269c2b17c80d6d126d6a367958e4a5d736a880ecf), contentStartColumn(8), contentStartLine(851), org.kframework.attributes.Location(Location(851,8,851,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(47860d52c18a441b229449cd89d5464256137dc32deb5551effbac0482c883f3), contentStartColumn(8), contentStartLine(845), org.kframework.attributes.Location(Location(845,8,845,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d7245713da157cf997438091f92bb78eb51a6cefa568bb0d30560ce08d647f26), contentStartColumn(8), contentStartLine(847), org.kframework.attributes.Location(Location(847,8,847,32)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#token("true","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(71744528cdad83bc729990d3af3b544d27b09630b2615ca707dd2fc6ec93e7c2), contentStartColumn(8), contentStartLine(844), org.kframework.attributes.Location(Location(844,8,844,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(991a3290bc7b6dca75d676a72a848ec6b2bd2827fb0e9626252aa1507394ca1b), contentStartColumn(8), contentStartLine(846), org.kframework.attributes.Location(Location(846,8,846,32)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(99ba64afc26a739953df142ccd4b486bba68107fce8c9aa356d40afa7a988712), contentStartColumn(8), contentStartLine(856), org.kframework.attributes.Location(Location(856,8,856,39)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(022c562a21d72cedfb795607d2249b8ad14b66399b720b3b2f4a05a1da08df96), contentStartColumn(8), contentStartLine(857), org.kframework.attributes.Location(Location(857,8,857,45)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(da818c43c21c5fb2cced7e02a74b6b4191d323de2967a671b961ad28550f3c7d), contentStartColumn(8), contentStartLine(854), org.kframework.attributes.Location(Location(854,8,854,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#token("false","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(55bb5c83c9563c712537b95401c0a5c88255fd7cdbd18b2d4358c54aee80660e), contentStartColumn(8), contentStartLine(855), org.kframework.attributes.Location(Location(855,8,855,40)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(_0,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0508592878b546cbc6eeda6ec7b322584eea5c6d6eea3f72be8418fe4f7149b2), contentStartColumn(8), contentStartLine(838), org.kframework.attributes.Location(Location(838,8,838,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(K,#token("true","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(82ac30b094be9b12206773d87b60274e929a41ca595f4674be1d37eeff873d7c), contentStartColumn(8), contentStartLine(836), org.kframework.attributes.Location(Location(836,8,836,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#token("true","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(78a3191cbbdec57b0f411f41291076c8124bb0d9b6b57905674b2c6858d78689), contentStartColumn(8), contentStartLine(835), org.kframework.attributes.Location(Location(835,8,835,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#token("false","Bool"),_0)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b729746be7bf2183d9eff138d97078a7c9489def6d8b2e1495c41ce3954997d), contentStartColumn(8), contentStartLine(837), org.kframework.attributes.Location(Location(837,8,837,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(_0,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9c183fae7de06f560180386d14d29c609cadf0c98266ce2adbecb50100a1daca), contentStartColumn(8), contentStartLine(833), org.kframework.attributes.Location(Location(833,8,833,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(B,#token("true","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e8d4ca75a690151f99f8904b068db555782f5599b11230a9d0b97a71afb6fc98), contentStartColumn(8), contentStartLine(831), org.kframework.attributes.Location(Location(831,8,831,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b9db8dba12010819161cc42dadccd0adf0100a47c21f884ae66c0a3d5483a1f), contentStartColumn(8), contentStartLine(830), org.kframework.attributes.Location(Location(830,8,830,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#token("false","Bool"),_0)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(61fbef33b3611f1cc2aaf3b5e8ddec4a0f434c557278c38461c65c8722743497), contentStartColumn(8), contentStartLine(832), org.kframework.attributes.Location(Location(832,8,832,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_=/=Bool_`(B1,B2)=>`notBool_`(`_==Bool_`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(31fe72efcfddcd8588a11d9d10c1b1a9f96ae3da46b647d4cb9d1e8b1bd1654f), contentStartColumn(8), contentStartLine(859), org.kframework.attributes.Location(Location(859,8,859,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module BOOL$SYNTAX [not-lr1, org.kframework.attributes.Location(Location(786,1,860,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BOOL-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax priority notBool_ > _orElseBool_ _orBool_ _andThenBool_ _impliesBool_ _andBool_ _xorBool_ > _==Bool_ _=/=Bool_
  syntax associativity left _xorBool_
  syntax associativity left _orElseBool_
  syntax associativity left _orBool_
  syntax associativity left _impliesBool_
  syntax associativity left _andThenBool_
  syntax associativity left _andBool_
  syntax associativity left _==Bool_ _=/=Bool_
  syntax associativity left _==Bool_
  syntax associativity left _=/=Bool_
  syntax Bool ::= Bool "xorBool" Bool [boolOperation, function, functional, hook(BOOL.xor), klabel(_xorBool_), left, smt-hook(xor), symbol]
  syntax Bool ::= Bool "orElseBool" Bool [boolOperation, function, functional, hook(BOOL.orElse), klabel(_orElseBool_), left, smt-hook(or), symbol]
  syntax Bool ::= Bool "orBool" Bool [boolOperation, function, functional, hook(BOOL.or), klabel(_orBool_), latex({#1}\vee_{\scriptstyle\it Bool}{#2}), left, smt-hook(or), symbol]
  syntax Bool ::= Bool "impliesBool" Bool [boolOperation, function, functional, hook(BOOL.implies), klabel(_impliesBool_), left, smt-hook(=>), symbol]
  syntax Bool ::= Bool "andThenBool" Bool [boolOperation, function, functional, hook(BOOL.andThen), klabel(_andThenBool_), left, smt-hook(and), symbol]
  syntax Bool ::= Bool "andBool" Bool [boolOperation, function, functional, hook(BOOL.and), klabel(_andBool_), latex({#1}\wedge_{\scriptstyle\it Bool}{#2}), left, smt-hook(and), symbol]
  syntax Bool ::= Bool "==Bool" Bool [function, functional, hook(BOOL.eq), klabel(_==Bool_), left, smt-hook(=), symbol]
  syntax Bool ::= Bool "=/=Bool" Bool [function, functional, hook(BOOL.ne), klabel(_=/=Bool_), left, smt-hook(distinct), symbol]
  syntax Bool ::= "notBool" Bool [boolOperation, function, functional, hook(BOOL.not), klabel(notBool_), latex(\neg_{\scriptstyle\it Bool}{#1}), smt-hook(not), symbol]
endmodule


module BOOL-SYNTAX [org.kframework.attributes.Location(Location(780,1,784,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SORT-BOOL
  imports BOOL-SYNTAX$SYNTAX
endmodule


module BOOL-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(780,1,784,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SORT-BOOL$SYNTAX
  syntax K
  syntax Bool ::= "true" [token]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "false" [token]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module BUILTIN-ID-TOKENS$SYNTAX [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "is#UpperId" "(" K ")" [function, predicate(#UpperId)]
  syntax Bool ::= "is#LowerId" "(" K ")" [function, predicate(#LowerId)]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2), token]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2), token]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BUILTIN-ID-TOKENS$SYNTAX [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "is#UpperId" "(" K ")" [function, predicate(#UpperId)]
  syntax Bool ::= "is#LowerId" "(" K ")" [function, predicate(#LowerId)]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2), token]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2), token]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BUILTIN-ID-TOKENS$SYNTAX [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#UpperId" "(" K ")" [function, predicate(#UpperId)]
  syntax Bool ::= "is#LowerId" "(" K ")" [function, predicate(#LowerId)]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2), token]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2), token]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BYTES$SYNTAX [org.kframework.attributes.Location(Location(1905,1,1919,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT$SYNTAX
  imports BYTES-KORE$SYNTAX
endmodule


module BYTES-HOOKED$SYNTAX [org.kframework.attributes.Location(Location(1635,1,1805,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX$SYNTAX
  syntax associativity right _+Bytes__BYTES-HOOKED_Bytes_Bytes_Bytes
  syntax String ::= "Bytes2String" "(" Bytes ")" [function, functional, hook(BYTES.bytes2string), klabel(Bytes2String)]
  syntax Signedness ::= "project:Signedness" "(" K ")" [function, projection]
  syntax Signedness ::= "Unsigned" [klabel(unsignedBytes), symbol]
  syntax Signedness ::= "Signed" [klabel(signedBytes), symbol]
  syntax KItem ::= Signedness
  syntax KItem ::= Int
  syntax KItem ::= Endianness
  syntax KItem ::= Bytes
  syntax K
  syntax Int ::= Bytes "[" Int "]" [function, hook(BYTES.get)]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Int ::= "lengthBytes" "(" Bytes ")" [function, functional, hook(BYTES.length), klabel(lengthBytes), smtlib(lengthBytes)]
  syntax Int ::= "Bytes2Int" "(" Bytes "," Endianness "," Signedness ")" [function, functional, hook(BYTES.bytes2int), klabel(Bytes2Int)]
  syntax Endianness ::= "project:Endianness" "(" K ")" [function, projection]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes), symbol]
  syntax Endianness ::= "BE" [klabel(bigEndianBytes), symbol]
  syntax Bytes [hook(BYTES.Bytes), org.kframework.attributes.Location(Location(1638,3,1638,41)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Bytes ::= Bytes "[" Int "<-" Int "]" [function, hook(BYTES.update)]
  syntax Bytes ::= Bytes "+Bytes" Bytes [function, functional, hook(BYTES.concat), right]
  syntax Bytes ::= "substrBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.substr), klabel(substrBytes)]
  syntax Bytes ::= "reverseBytes" "(" Bytes ")" [function, functional, hook(BYTES.reverse), klabel(reverseBytes)]
  syntax Bytes ::= "replaceAtBytes" "(" Bytes "," Int "," Bytes ")" [function, hook(BYTES.replaceAt), klabel(replaceAtBytes)]
  syntax Bytes ::= "project:Bytes" "(" K ")" [function, projection]
  syntax Bytes ::= "padRightBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padRight), klabel(padRightBytes)]
  syntax Bytes ::= "padLeftBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padLeft), klabel(padLeftBytes)]
  syntax Bytes ::= "String2Bytes" "(" String ")" [function, functional, hook(BYTES.string2bytes), klabel(String2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Int "," Endianness ")" [function, functional, hook(BYTES.int2bytes), klabel(Int2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Endianness "," Signedness ")" [function, functional, klabel(Int2BytesNoLen)]
  syntax Bytes ::= ".Bytes" [function, functional, hook(BYTES.empty)]
  syntax Bool ::= "isSignedness" "(" K ")" [function, predicate(Signedness)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  syntax Bool ::= "isEndianness" "(" K ")" [function, predicate(Endianness)]
  syntax Bool ::= "isBytes" "(" K ")" [function, predicate(Bytes)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:Signedness`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Endianness`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bytes`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BYTES-HOOKED$SYNTAX [org.kframework.attributes.Location(Location(1635,1,1805,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX$SYNTAX
  syntax associativity right _+Bytes__BYTES-HOOKED_Bytes_Bytes_Bytes
  syntax String ::= "Bytes2String" "(" Bytes ")" [function, functional, hook(BYTES.bytes2string), klabel(Bytes2String)]
  syntax Signedness ::= "project:Signedness" "(" K ")" [function, projection]
  syntax Signedness ::= "Unsigned" [klabel(unsignedBytes), symbol]
  syntax Signedness ::= "Signed" [klabel(signedBytes), symbol]
  syntax KItem ::= Signedness
  syntax KItem ::= Int
  syntax KItem ::= Endianness
  syntax KItem ::= Bytes
  syntax K
  syntax Int ::= Bytes "[" Int "]" [function, hook(BYTES.get)]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Int ::= "lengthBytes" "(" Bytes ")" [function, functional, hook(BYTES.length), klabel(lengthBytes), smtlib(lengthBytes)]
  syntax Int ::= "Bytes2Int" "(" Bytes "," Endianness "," Signedness ")" [function, functional, hook(BYTES.bytes2int), klabel(Bytes2Int)]
  syntax Endianness ::= "project:Endianness" "(" K ")" [function, projection]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes), symbol]
  syntax Endianness ::= "BE" [klabel(bigEndianBytes), symbol]
  syntax Bytes [hook(BYTES.Bytes), org.kframework.attributes.Location(Location(1638,3,1638,41)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Bytes ::= Bytes "[" Int "<-" Int "]" [function, hook(BYTES.update)]
  syntax Bytes ::= Bytes "+Bytes" Bytes [function, functional, hook(BYTES.concat), right]
  syntax Bytes ::= "substrBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.substr), klabel(substrBytes)]
  syntax Bytes ::= "reverseBytes" "(" Bytes ")" [function, functional, hook(BYTES.reverse), klabel(reverseBytes)]
  syntax Bytes ::= "replaceAtBytes" "(" Bytes "," Int "," Bytes ")" [function, hook(BYTES.replaceAt), klabel(replaceAtBytes)]
  syntax Bytes ::= "project:Bytes" "(" K ")" [function, projection]
  syntax Bytes ::= "padRightBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padRight), klabel(padRightBytes)]
  syntax Bytes ::= "padLeftBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padLeft), klabel(padLeftBytes)]
  syntax Bytes ::= "String2Bytes" "(" String ")" [function, functional, hook(BYTES.string2bytes), klabel(String2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Int "," Endianness ")" [function, functional, hook(BYTES.int2bytes), klabel(Int2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Endianness "," Signedness ")" [function, functional, klabel(Int2BytesNoLen)]
  syntax Bytes ::= ".Bytes" [function, functional, hook(BYTES.empty)]
  syntax Bool ::= "isSignedness" "(" K ")" [function, predicate(Signedness)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  syntax Bool ::= "isEndianness" "(" K ")" [function, predicate(Endianness)]
  syntax Bool ::= "isBytes" "(" K ")" [function, predicate(Bytes)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:Signedness`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Endianness`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bytes`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BYTES-KORE$SYNTAX [kore, org.kframework.attributes.Location(Location(1892,1,1895,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BYTES-SYMBOLIC-CEIL$SYNTAX
  imports BYTES-HOOKED$SYNTAX
endmodule


module BYTES-SYMBOLIC-CEIL$SYNTAX [kore, org.kframework.attributes.Location(Location(1897,1,1903,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports INT$SYNTAX
  imports BYTES-HOOKED$SYNTAX
endmodule


module COLLECTIONS$SYNTAX [org.kframework.attributes.Location(Location(753,1,761,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SET$SYNTAX
  imports MAP$SYNTAX
  imports LIST$SYNTAX
  syntax Set ::= "List2Set" "(" List ")" [function, functional, hook(SET.list2set), klabel(List2Set)]
  syntax List ::= "Set2List" "(" Set ")" [function, functional, hook(SET.set2list), klabel(Set2List)]
endmodule


module CONFIG-CELLS [org.kframework.attributes.Location(Location(299,1,312,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RULE-LISTS
  imports KCELLS
  imports CONFIG-CELLS$SYNTAX
endmodule


module CONFIG-CELLS$SYNTAX [org.kframework.attributes.Location(Location(299,1,312,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RULE-LISTS$SYNTAX
  imports KCELLS$SYNTAX
  syntax K
  syntax Cell ::= "<" #CellName #CellProperties ">" K "</" #CellName ">" [klabel(#configCell), symbol]
  syntax Cell ::= "<" #CellName "/>" [klabel(#externalCell), symbol]
  syntax Bool ::= "is#CellProperty" "(" K ")" [function, predicate(#CellProperty)]
  syntax Bool ::= "is#CellProperties" "(" K ")" [function, predicate(#CellProperties)]
  syntax Bool ::= "is#CellName" "(" K ")" [function, predicate(#CellName)]
  syntax #CellProperty ::= #CellName "=" KString [klabel(#cellProperty), symbol]
  syntax #CellProperties ::= #CellProperty #CellProperties [klabel(#cellPropertyList), symbol]
  syntax #CellProperties ::= "" [klabel(#cellPropertyListTerminator), symbol]
  syntax #CellName ::= r"[a-zA-Z][a-zA-Z0-9\\-]*" [prec(1), token]
  syntax #CellName ::= #UpperId [token]
  syntax #CellName ::= #LowerId [token]
endmodule


module DEFAULT-LAYOUT [org.kframework.attributes.Location(Location(504,1,508,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports DEFAULT-LAYOUT$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module DEFAULT-LAYOUT$SYNTAX [org.kframework.attributes.Location(Location(504,1,508,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#Layout" "(" K ")" [function, predicate(#Layout)]
  syntax #Layout ::= r"(\\/\\/[^\\n\\r]*)"
  syntax #Layout ::= r"(\\/\\*([^\\*]|(\\*+([^\\*\\/])))*\\*+\\/)"
  syntax #Layout ::= r"([\\ \\n\\r\\t])"
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module DOMAINS [org.kframework.attributes.Location(Location(42,1,53,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports SET
  imports MAP
  imports LIST
  imports K-IO
  imports INT
  imports ID
  imports DOMAINS-SYNTAX
  imports DOMAINS$SYNTAX
  imports BOOL
  imports BASIC-K
endmodule


module DOMAINS$SYNTAX [org.kframework.attributes.Location(Location(42,1,53,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING$SYNTAX
  imports SET$SYNTAX
  imports MAP$SYNTAX
  imports LIST$SYNTAX
  imports K-IO$SYNTAX
  imports INT$SYNTAX
  imports ID$SYNTAX
  imports DOMAINS-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  imports BASIC-K$SYNTAX
endmodule


module DOMAINS-SYNTAX [org.kframework.attributes.Location(Location(34,1,40,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  imports STRING-SYNTAX
  imports SORT-K
  imports ID-SYNTAX
  imports DOMAINS-SYNTAX$SYNTAX
  imports BOOL-SYNTAX
endmodule


module DOMAINS-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(34,1,40,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  imports STRING-SYNTAX$SYNTAX
  imports SORT-K$SYNTAX
  imports ID-SYNTAX$SYNTAX
  imports BOOL-SYNTAX$SYNTAX
endmodule


module EXECUTION [org.kframework.attributes.Location(Location(21,1,65,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k))]
  imports MAP
  imports EXECUTION-SYNTAX
  imports EXECUTION$SYNTAX
  imports DOMAINS
  syntax KItem ::= Cell
  syntax K
  syntax Cell ::= VCell
  syntax Cell ::= SCell
  syntax Cell ::= RCell
  syntax Cell ::= PCell
  syntax Cell ::= NCell
  syntax Cell ::= MCell
  syntax Cell ::= KCell
  syntax Cell ::= GeneratedTopCell
  syntax Cell ::= BCell
  syntax Cell ::= "project:Cell" "(" K ")" [function, projection]
  syntax Bool ::= "isCell" "(" K ")" [function, predicate(Cell)]
  rule initVCell(.KList)=>`<V>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initSCell(.KList)=>`<S>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initRCell(.KList)=>`<R>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initPCell(.KList)=>`<P>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initNCell(.KList)=>`<N>`(#token("1","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initMCell(.KList)=>`<M>`(`.Set`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initKCell(Init)=>`<k>`(`project:Block`(`Map:lookup`(Init,#token("$PGM","KConfigVar")))) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initGeneratedTopCell(Init)=>`<generatedTop>`(initKCell(Init),initMCell(.KList),initSCell(.KList),initBCell(.KList),initPCell(.KList),initVCell(.KList),initRCell(.KList),initGeneratedCounterCell(.KList),initNCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initBCell(.KList)=>`<B>`(`.List`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule `project:Cell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `<generatedTop>`(`<k>`(``TX=>`exec(_)_EXECUTION-SYNTAX_Executable_ETHTransaction`(TX)``~>_DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1abd97887b318b7ed8505eba2d5d4584734e332df74f344a3f81650a5204c425), contentStartColumn(10), contentStartLine(55), cool-like, org.kframework.attributes.Location(Location(55,10,55,52)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(``TX=>.K``~>_DotVar1),`<M>`(`_Set_`(`.Set`(.KList)=>`SetItem`(TX),_DotVar2)),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fb215c30f36b7589085a0649fa901176edb5e085439b775500771bf0aa9d06f6), contentStartColumn(10), contentStartLine(46), cool-like, org.kframework.attributes.Location(Location(46,10,47,42)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`` `_in_gives__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,Token,Amount)=>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,Token,`_-Int_`(#token("0","Int"),Amount))``~>_DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d6c77b2ac4a0e116808232b0c1089ff65981bb5cf2e296ed0aaac629e6a0e5d6), contentStartColumn(10), contentStartLine(43), org.kframework.attributes.Location(Location(43,10,43,119)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`` `_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,Token,Amount)=>.K``~>_DotVar1),_0,`<S>`(`_Map_`(`_|->_`(`_in__EXECUTION-SYNTAX_BalanceEntry_ETHAddress_ETHAddress`(Address,Token),OldBalance=>`_+Int_`(Amount,OldBalance)),_DotVar2)),_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c0090e4884ffef48f1877c19cacba3efaa8a455f4565e437943c37d52257a8f4), contentStartColumn(10), contentStartLine(39), org.kframework.attributes.Location(Location(39,10,40,90)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`` `__;_EXECUTION-SYNTAX_Block_Block_Statement`(B,S)=>B~>S``~>_DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(06a57fb7c949f603f1801b1d75d271a320b70dce7738ab4072b281fd0634ff6d), contentStartColumn(10), contentStartLine(57), org.kframework.attributes.Location(Location(57,10,57,53)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`` `_;_EXECUTION-SYNTAX_Block_Statement`(S)=>S``~>_DotVar1),_0,_1,_2,_3,_4,_5,_6,_7) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(92548f1f72003c68fc4fa12eb99c560a697d791a82270c761854e47e62f7b4e4), contentStartColumn(10), contentStartLine(58), org.kframework.attributes.Location(Location(58,10,58,40)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,Token,_0)~>_DotVar1),_1,`<S>`(B=>`Map:update`(B,`_in__EXECUTION-SYNTAX_BalanceEntry_ETHAddress_ETHAddress`(Address,Token),#token("0","Int"))),_2,_3,_4,_5,_6,_7) requires `notBool_`(`Set:in`(`_in__EXECUTION-SYNTAX_BalanceEntry_ETHAddress_ETHAddress`(Address,Token),`keys(_)_MAP_Set_Map`(B))) ensures #token("true","Bool") [UNIQUE_ID(32acc91d2c8b8ede8776aadd002248ce6d3ca60b81918871b41dd18abc6de3c0), contentStartColumn(10), contentStartLine(36), org.kframework.attributes.Location(Location(36,10,37,102)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `<generatedTop>`(`<k>`(.K=>`exec(_)_EXECUTION-SYNTAX_Executable_ETHTransaction`(TX)),`<M>`(`_Set_`(`SetItem`(TX)=>`.Set`(.KList),_DotVar1)),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(143354d20be7d0c4310bbf4ebdb0fc2108da6bbe59aa509ab9d2a10d1768f240), contentStartColumn(10), contentStartLine(52), org.kframework.attributes.Location(Location(52,10,53,61)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(.K=>`DONE_EXECUTION-SYNTAX_Statement`(.KList)),`<M>`(`.Set`(.KList)),_0,_1,_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c953ace8ab9966b842fcaa68e7bd64d0a508ae3fe72d372e49f37807b7474bfc), contentStartColumn(6), contentStartLine(62), org.kframework.attributes.Location(Location(62,6,63,19)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module EXECUTION$SYNTAX [org.kframework.attributes.Location(Location(21,1,65,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k))]
  imports MAP$SYNTAX
  imports EXECUTION-SYNTAX$SYNTAX
  imports DOMAINS$SYNTAX
  syntax VCellOpt ::= VCell
  syntax VCellOpt ::= "project:VCellOpt" "(" K ")" [function, projection]
  syntax VCellOpt ::= "noVCell" [cellOptAbsent(VCell)]
  syntax VCell ::= "project:VCell" "(" K ")" [function, projection]
  syntax VCell ::= "initVCell" [function, initializer, noThread]
  syntax VCell ::= "<V>" Map "</V>" [cell, cellName(V), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax SCellOpt ::= SCell
  syntax SCellOpt ::= "project:SCellOpt" "(" K ")" [function, projection]
  syntax SCellOpt ::= "noSCell" [cellOptAbsent(SCell)]
  syntax SCell ::= "project:SCell" "(" K ")" [function, projection]
  syntax SCell ::= "initSCell" [function, initializer, noThread]
  syntax SCell ::= "<S>" Map "</S>" [cell, cellName(S), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax RCellOpt ::= RCell
  syntax RCellOpt ::= "project:RCellOpt" "(" K ")" [function, projection]
  syntax RCellOpt ::= "noRCell" [cellOptAbsent(RCell)]
  syntax RCell ::= "project:RCell" "(" K ")" [function, projection]
  syntax RCell ::= "initRCell" [function, initializer, noThread]
  syntax RCell ::= "<R>" Map "</R>" [cell, cellName(R), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax PCellOpt ::= PCell
  syntax PCellOpt ::= "project:PCellOpt" "(" K ")" [function, projection]
  syntax PCellOpt ::= "noPCell" [cellOptAbsent(PCell)]
  syntax PCell ::= "project:PCell" "(" K ")" [function, projection]
  syntax PCell ::= "initPCell" [function, initializer, noThread]
  syntax PCell ::= "<P>" Map "</P>" [cell, cellName(P), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax NCellOpt ::= NCell
  syntax NCellOpt ::= "project:NCellOpt" "(" K ")" [function, projection]
  syntax NCellOpt ::= "noNCell" [cellOptAbsent(NCell)]
  syntax NCell ::= "project:NCell" "(" K ")" [function, projection]
  syntax NCell ::= "initNCell" [function, initializer, noThread]
  syntax NCell ::= "<N>" Int "</N>" [cell, cellName(N), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax MCellOpt ::= MCell
  syntax MCellOpt ::= "project:MCellOpt" "(" K ")" [function, projection]
  syntax MCellOpt ::= "noMCell" [cellOptAbsent(MCell)]
  syntax MCell ::= "project:MCell" "(" K ")" [function, projection]
  syntax MCell ::= "initMCell" [function, initializer, noThread]
  syntax MCell ::= "<M>" Set "</M>" [cell, cellName(M), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax KItem ::= VCellOpt
  syntax KItem ::= VCell
  syntax KItem ::= SCellOpt
  syntax KItem ::= SCell
  syntax KItem ::= RCellOpt
  syntax KItem ::= RCell
  syntax KItem ::= PCellOpt
  syntax KItem ::= PCell
  syntax KItem ::= NCellOpt
  syntax KItem ::= NCell
  syntax KItem ::= MCellOpt
  syntax KItem ::= MCell
  syntax KItem ::= KCellOpt
  syntax KItem ::= KCell
  syntax KItem ::= GeneratedTopCellFragment
  syntax KItem ::= GeneratedTopCell
  syntax KItem ::= GeneratedCounterCell
  syntax KItem ::= BCellOpt
  syntax KItem ::= BCell
  syntax KCellOpt ::= KCell
  syntax KCellOpt ::= "project:KCellOpt" "(" K ")" [function, projection]
  syntax KCellOpt ::= "noKCell" [cellOptAbsent(KCell)]
  syntax KCell ::= "project:KCell" "(" K ")" [function, projection]
  syntax KCell ::= "initKCell" "(" Map ")" [function, initializer, noThread]
  syntax KCell ::= "<k>" K "</k>" [cell, cellName(k), color(green), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), maincell, org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax K
  syntax GeneratedTopCellFragment ::= "project:GeneratedTopCellFragment" "(" K ")" [function, projection]
  syntax GeneratedTopCellFragment ::= "<generatedTop>-fragment" KCellOpt MCellOpt SCellOpt BCellOpt PCellOpt VCellOpt RCellOpt NCellOpt "</generatedTop>-fragment" [cellFragment(GeneratedTopCell)]
  syntax GeneratedTopCell ::= "project:GeneratedTopCell" "(" K ")" [function, projection]
  syntax GeneratedTopCell ::= "initGeneratedTopCell" "(" Map ")" [function, initializer, noThread]
  syntax GeneratedTopCell ::= "<generatedTop>" KCell MCell SCell BCell PCell VCell RCell GeneratedCounterCell NCell "</generatedTop>" [cell, cellName(generatedTop), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%n%3%n%4%n%5%n%6%n%7%n%8%n%10%d%n%11), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), topcell]
  syntax GeneratedCounterCell ::= "project:GeneratedCounterCell" "(" K ")" [function, projection]
  syntax GeneratedCounterCell ::= "initGeneratedCounterCell" [function, initializer, noThread]
  syntax GeneratedCounterCell ::= "getGeneratedCounterCell" "(" GeneratedTopCell ")" [function]
  syntax GeneratedCounterCell ::= "<generatedCounter>" Int "</generatedCounter>" [cell, cellName(generatedCounter), format(%1%i%n%2%d%n%3), topcell]
  syntax Bool ::= "isVCellOpt" "(" K ")" [function, predicate(VCellOpt)]
  syntax Bool ::= "isVCell" "(" K ")" [function, predicate(VCell)]
  syntax Bool ::= "isSCellOpt" "(" K ")" [function, predicate(SCellOpt)]
  syntax Bool ::= "isSCell" "(" K ")" [function, predicate(SCell)]
  syntax Bool ::= "isRCellOpt" "(" K ")" [function, predicate(RCellOpt)]
  syntax Bool ::= "isRCell" "(" K ")" [function, predicate(RCell)]
  syntax Bool ::= "isPCellOpt" "(" K ")" [function, predicate(PCellOpt)]
  syntax Bool ::= "isPCell" "(" K ")" [function, predicate(PCell)]
  syntax Bool ::= "isNCellOpt" "(" K ")" [function, predicate(NCellOpt)]
  syntax Bool ::= "isNCell" "(" K ")" [function, predicate(NCell)]
  syntax Bool ::= "isMCellOpt" "(" K ")" [function, predicate(MCellOpt)]
  syntax Bool ::= "isMCell" "(" K ")" [function, predicate(MCell)]
  syntax Bool ::= "isKCellOpt" "(" K ")" [function, predicate(KCellOpt)]
  syntax Bool ::= "isKCell" "(" K ")" [function, predicate(KCell)]
  syntax Bool ::= "isGeneratedTopCellFragment" "(" K ")" [function, predicate(GeneratedTopCellFragment)]
  syntax Bool ::= "isGeneratedTopCell" "(" K ")" [function, predicate(GeneratedTopCell)]
  syntax Bool ::= "isGeneratedCounterCell" "(" K ")" [function, predicate(GeneratedCounterCell)]
  syntax Bool ::= "isBCellOpt" "(" K ")" [function, predicate(BCellOpt)]
  syntax Bool ::= "isBCell" "(" K ")" [function, predicate(BCell)]
  syntax BCellOpt ::= BCell
  syntax BCellOpt ::= "project:BCellOpt" "(" K ")" [function, projection]
  syntax BCellOpt ::= "noBCell" [cellOptAbsent(BCell)]
  syntax BCell ::= "project:BCell" "(" K ")" [function, projection]
  syntax BCell ::= "initBCell" [function, initializer, noThread]
  syntax BCell ::= "<B>" List "</B>" [cell, cellName(B), contentStartColumn(5), contentStartLine(26), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule initGeneratedCounterCell(.KList)=>`<generatedCounter>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule getGeneratedCounterCell(`<generatedTop>`(_0,_1,_2,_3,_4,_5,_6,Cell,_7))=>Cell requires #token("true","Bool") ensures #token("true","Bool") 
  rule `project:VCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:VCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:SCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:SCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:RCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:RCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:PCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:PCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:NCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:NCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:MCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:MCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:GeneratedTopCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:GeneratedTopCellFragment`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:GeneratedCounterCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:BCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:BCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  Bubble(config,<k color="green"> $PGM:Block </k>       // Instructions left to execute
    <M> .Set </M>     // Available transactions for reordering
    <S> .Map </S>             // System state; mapping of all (Address in Token) to Balance (all type Integer)
    <B> .List </B>
    <P> .Map </P>
    <V> .Map </V> // Mapping of Maker Vault to Owner
    <R> .Map </R> // Stability fees for Maker
    <N> 1 </N>,[contentStartColumn(5), contentStartLine(26), org.kframework.attributes.Location(Location(25,1,33,14)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k))])
endmodule


module EXECUTION-SYNTAX [org.kframework.attributes.Location(Location(1,1,19,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k))]
  imports EXECUTION-SYNTAX$SYNTAX
  imports DOMAINS-SYNTAX
endmodule


module EXECUTION-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1,1,19,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/execution.k))]
  imports DOMAINS-SYNTAX$SYNTAX
  syntax Statement ::= Executable
  syntax Statement ::= ETHTransaction
  syntax Statement ::= ETHAddress "in" ETHAddress "gives" Int
  syntax Statement ::= ETHAddress "in" ETHAddress "gets" Int
  syntax Statement ::= "project:Statement" "(" K ")" [function, projection]
  syntax Statement ::= "FAIL"
  syntax Statement ::= "DONE"
  syntax KItem ::= Statement
  syntax KItem ::= Executable
  syntax KItem ::= ETHTransaction
  syntax KItem ::= ETHAddress
  syntax KItem ::= Block
  syntax KItem ::= BalanceEntry
  syntax K
  syntax Executable ::= "project:Executable" "(" K ")" [function, projection]
  syntax Executable ::= "exec(" ETHTransaction ")"
  syntax ETHTransaction ::= ETHTransaction "fee" Int
  syntax ETHTransaction ::= ETHTransaction "block" Int
  syntax ETHTransaction ::= "project:ETHTransaction" "(" K ")" [function, projection]
  syntax ETHAddress ::= Int
  syntax ETHAddress ::= "project:ETHAddress" "(" K ")" [function, projection]
  syntax ETHAddress ::= "ETH"
  syntax Bool ::= "isStatement" "(" K ")" [function, predicate(Statement)]
  syntax Bool ::= "isExecutable" "(" K ")" [function, predicate(Executable)]
  syntax Bool ::= "isETHTransaction" "(" K ")" [function, predicate(ETHTransaction)]
  syntax Bool ::= "isETHAddress" "(" K ")" [function, predicate(ETHAddress)]
  syntax Bool ::= "isBlock" "(" K ")" [function, predicate(Block)]
  syntax Bool ::= "isBalanceEntry" "(" K ")" [function, predicate(BalanceEntry)]
  syntax Block ::= Statement ";"
  syntax Block ::= Block Statement ";"
  syntax Block ::= "project:Block" "(" K ")" [function, projection]
  syntax BalanceEntry ::= ETHAddress "in" ETHAddress
  syntax BalanceEntry ::= "project:BalanceEntry" "(" K ")" [function, projection]
  rule `project:Statement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Executable`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ETHTransaction`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ETHAddress`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Block`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:BalanceEntry`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module FLOAT$SYNTAX [org.kframework.attributes.Location(Location(1157,1,1329,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX$SYNTAX
  imports FLOAT-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  syntax priority --Float__FLOAT_Float_Float > _^Float__FLOAT_Float_Float_Float > _/Float__FLOAT_Float_Float_Float _%Float__FLOAT_Float_Float_Float _*Float__FLOAT_Float_Float_Float > _-Float__FLOAT_Float_Float_Float _+Float__FLOAT_Float_Float_Float
  syntax associativity left _^Float__FLOAT_Float_Float_Float
  syntax associativity left _>Float__FLOAT_Bool_Float_Float
  syntax associativity left _>=Float__FLOAT_Bool_Float_Float
  syntax associativity left _==Float__FLOAT_Bool_Float_Float
  syntax associativity left _=/=Float__FLOAT_Bool_Float_Float
  syntax associativity left _<Float__FLOAT_Bool_Float_Float
  syntax associativity left _<=Float__FLOAT_Bool_Float_Float
  syntax associativity left _/Float__FLOAT_Float_Float_Float _%Float__FLOAT_Float_Float_Float _*Float__FLOAT_Float_Float_Float
  syntax associativity left _/Float__FLOAT_Float_Float_Float
  syntax associativity left _-Float__FLOAT_Float_Float_Float _+Float__FLOAT_Float_Float_Float
  syntax associativity left _-Float__FLOAT_Float_Float_Float
  syntax associativity left _+Float__FLOAT_Float_Float_Float
  syntax associativity left _*Float__FLOAT_Float_Float_Float
  syntax associativity left _%Float__FLOAT_Float_Float_Float
  syntax Int ::= "precisionFloat" "(" Float ")" [function, functional, hook(FLOAT.precision), klabel(precisionFloat)]
  syntax Int ::= "exponentFloat" "(" Float ")" [function, functional, hook(FLOAT.exponent), klabel(exponentFloat)]
  syntax Int ::= "exponentBitsFloat" "(" Float ")" [function, functional, hook(FLOAT.exponentBits), klabel(exponentBitsFloat)]
  syntax Int ::= "Float2Int" "(" Float ")" [function, functional, hook(FLOAT.float2int), klabel(Float2Int), latex({\\it{}Float2Int})]
  syntax Float ::= Float "^Float" Float [function, hook(FLOAT.pow), latex({#1}^{#2}), left]
  syntax Float ::= Float "/Float" Float [function, hook(FLOAT.div), latex({#1}\mathrel{\div_{\scriptstyle\it Float}}{#2}), left, smt-hook((fp.div roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "-Float" Float [function, hook(FLOAT.sub), latex({#1}\mathrel{-_{\scriptstyle\it Float}}{#2}), left, smt-hook((fp.sub roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "+Float" Float [function, hook(FLOAT.add), latex({#1}\mathrel{+_{\scriptstyle\it Float}}{#2}), left, smt-hook((fp.add roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "*Float" Float [function, hook(FLOAT.mul), latex({#1}\mathrel{\ast_{\scriptstyle\it Float}}{#2}), left, smt-hook((fp.mul roundNearestTiesToEven #1 #2))]
  syntax Float ::= Float "%Float" Float [function, hook(FLOAT.rem), latex({#1}\mathrel{\%_{\scriptstyle\it Float}}{#2}), left, smt-hook((fp.rem roundNearestTiesToEven #1 #2))]
  syntax Float ::= "tanFloat" "(" Float ")" [function, hook(FLOAT.tan), klabel(tanFloat)]
  syntax Float ::= "sqrtFloat" "(" Float ")" [function, klabel(sqrtFloat)]
  syntax Float ::= "sinFloat" "(" Float ")" [function, functional, hook(FLOAT.sin), klabel(sinFloat)]
  syntax Float ::= "roundFloat" "(" Float "," Int "," Int ")" [function, hook(FLOAT.round), klabel(roundFloat)]
  syntax Float ::= "rootFloat" "(" Float "," Int ")" [function, hook(FLOAT.root), klabel(rootFloat)]
  syntax Float ::= "minValueFloat" "(" Int "," Int ")" [function, hook(FLOAT.minValue), klabel(minValueFloat)]
  syntax Float ::= "minFloat" "(" Float "," Float ")" [function, hook(FLOAT.min), klabel(minFloat), smt-hook(fp.min)]
  syntax Float ::= "maxValueFloat" "(" Int "," Int ")" [function, hook(FLOAT.maxValue), klabel(maxValueFloat)]
  syntax Float ::= "maxFloat" "(" Float "," Float ")" [function, hook(FLOAT.max), klabel(maxFloat), smt-hook(fp.max)]
  syntax Float ::= "logFloat" "(" Float ")" [function, hook(FLOAT.log), klabel(logFloat)]
  syntax Float ::= "floorFloat" "(" Float ")" [function, functional, hook(FLOAT.floor), klabel(floorFloat)]
  syntax Float ::= "expFloat" "(" Float ")" [function, functional, hook(FLOAT.exp), klabel(expFloat)]
  syntax Float ::= "cosFloat" "(" Float ")" [function, functional, hook(FLOAT.cos), klabel(cosFloat)]
  syntax Float ::= "ceilFloat" "(" Float ")" [function, functional, hook(FLOAT.ceil), klabel(ceilFloat)]
  syntax Float ::= "atanFloat" "(" Float ")" [function, functional, hook(FLOAT.atan), klabel(atanFloat)]
  syntax Float ::= "atan2Float" "(" Float "," Float ")" [function, hook(FLOAT.atan2), klabel(atan2Float)]
  syntax Float ::= "asinFloat" "(" Float ")" [function, hook(FLOAT.asin), klabel(asinFloat)]
  syntax Float ::= "acosFloat" "(" Float ")" [function, hook(FLOAT.acos), klabel(acosFloat)]
  syntax Float ::= "absFloat" "(" Float ")" [function, functional, hook(FLOAT.abs), klabel(absFloat), smt-hook(fp.abs)]
  syntax Float ::= "Int2Float" "(" Int "," Int "," Int ")" [function, hook(FLOAT.int2float), klabel(Int2Float), latex({\\it{}Int2Float})]
  syntax Float ::= "--Float" Float [function, functional, hook(FLOAT.neg), smt-hook(fp.neg)]
  syntax Bool ::= Float ">Float" Float [function, hook(FLOAT.gt), latex({#1}\mathrel{>_{\scriptstyle\it Float}}{#2}), left, smt-hook(fg.gt)]
  syntax Bool ::= Float ">=Float" Float [function, hook(FLOAT.ge), latex({#1}\mathrel{\geq_{\scriptstyle\it Float}}{#2}), left, smt-hook(fp.geq)]
  syntax Bool ::= Float "==Float" Float [function, hook(FLOAT.eq), klabel(_==Float_), latex({#1}\mathrel{==_{\scriptstyle\it Float}}{#2}), left, smt-hook(fp.eq)]
  syntax Bool ::= Float "=/=Float" Float [function, latex({#1}\mathrel{\neq_{\scriptstyle\it Float}}{#2}), left, smt-hook((not (fp.eq #1 #2)))]
  syntax Bool ::= Float "<Float" Float [function, hook(FLOAT.lt), latex({#1}\mathrel{<_{\scriptstyle\it Float}}{#2}), left, smt-hook(fp.lt)]
  syntax Bool ::= Float "<=Float" Float [function, hook(FLOAT.le), latex({#1}\mathrel{\leq_{\scriptstyle\it Float}}{#2}), left, smt-hook(fp.leq)]
  syntax Bool ::= "signFloat" "(" Float ")" [function, functional, hook(FLOAT.sign), klabel(signFloat)]
  syntax Bool ::= "isNaN" "(" Float ")" [function, functional, hook(FLOAT.isNaN), klabel(isNaN), smt-hook(fp.isNaN)]
  syntax Bool ::= "isInfinite" "(" Float ")" [function, functional, klabel(isInfinite)]
endmodule


module FLOAT-SYNTAX [org.kframework.attributes.Location(Location(1150,1,1155,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports FLOAT-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module FLOAT-SYNTAX [org.kframework.attributes.Location(Location(1150,1,1155,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports FLOAT-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module FLOAT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1150,1,1155,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Float
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Float [hook(FLOAT.Float), org.kframework.attributes.Location(Location(1151,3,1151,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1), token]
  syntax Float ::= "project:Float" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isFloat" "(" K ")" [function, predicate(Float)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Float`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module FLOAT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1150,1,1155,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Float
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Float [hook(FLOAT.Float), org.kframework.attributes.Location(Location(1151,3,1151,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1), token]
  syntax Float ::= "project:Float" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isFloat" "(" K ")" [function, predicate(Float)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Float`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module FLOAT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1150,1,1155,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Float
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Float [hook(FLOAT.Float), org.kframework.attributes.Location(Location(1151,3,1151,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1), token]
  syntax Float ::= "project:Float" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isFloat" "(" K ")" [function, predicate(Float)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Float`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module ID [org.kframework.attributes.Location(Location(1959,1,1964,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ID-COMMON
  imports ID$SYNTAX
  rule `freshId(_)_ID-COMMON_Id_Int`(I)=>`String2Id(_)_ID-COMMON_Id_String`(`_+String__STRING-COMMON_String_String_String`(#token("\"_\"","String"),`Int2String(_)_STRING-COMMON_String_Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3965c8e65257ebae926d601fa8ac672d34e4c211d73ba594c571c6bc5960f3de), contentStartColumn(8), contentStartLine(1963), org.kframework.attributes.Location(Location(1963,8,1963,62)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module ID$SYNTAX [org.kframework.attributes.Location(Location(1959,1,1964,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ID-COMMON$SYNTAX
endmodule


module ID-COMMON [org.kframework.attributes.Location(Location(1950,1,1957,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports ID-SYNTAX
  imports ID-COMMON$SYNTAX
endmodule


module ID-COMMON$SYNTAX [org.kframework.attributes.Location(Location(1950,1,1957,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING$SYNTAX
  imports ID-SYNTAX$SYNTAX
  syntax String ::= "Id2String" "(" Id ")" [function, functional, hook(STRING.token2string), klabel(Id2String)]
  syntax Id ::= "freshId" "(" Int ")" [freshGenerator, function, functional, klabel(freshId)]
  syntax Id ::= "String2Id" "(" String ")" [function, functional, hook(STRING.string2token), klabel(String2Id)]
endmodule


module ID-SYNTAX [org.kframework.attributes.Location(Location(1946,1,1948,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ID-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module ID-SYNTAX [org.kframework.attributes.Location(Location(1946,1,1948,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ID-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module ID-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1946,1,1948,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Id
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Id [org.kframework.attributes.Location(Location(1947,3,1947,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Id ::= "project:Id" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isId" "(" K ")" [function, predicate(Id)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Id`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module ID-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1946,1,1948,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Id
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Id [org.kframework.attributes.Location(Location(1947,3,1947,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Id ::= "project:Id" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isId" "(" K ")" [function, predicate(Id)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Id`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module ID-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1946,1,1948,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Id
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Id [org.kframework.attributes.Location(Location(1947,3,1947,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Id ::= "project:Id" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isId" "(" K ")" [function, predicate(Id)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Id`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module ID-SYNTAX-PROGRAM-PARSING [org.kframework.attributes.Location(Location(1939,1,1944,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ID-SYNTAX-PROGRAM-PARSING$SYNTAX
  imports BUILTIN-ID-TOKENS
endmodule


module ID-SYNTAX-PROGRAM-PARSING$SYNTAX [org.kframework.attributes.Location(Location(1939,1,1944,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax KItem ::= Id
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K
  syntax Id ::= r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*" [prec(1), token]
  syntax Id ::= #UpperId [token]
  syntax Id ::= #LowerId [token]
  syntax Id ::= "project:Id" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isId" "(" K ")" [function, predicate(Id)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Id`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module INT [org.kframework.attributes.Location(Location(1085,1,1115,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL
  imports INT-SYMBOLIC
  imports INT-KORE
  imports INT-COMMON
  imports INT$SYNTAX
  rule `signExtendBitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_-Int_`(`_modInt_`(`_+Int_`(`bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))),`_<<Int_`(#token("1","Int"),LEN)),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3b67f4bf2235fc46fc94b1d10e936100ea3fc4f2dbaa4e4a77593e8385f5004f), contentStartColumn(8), contentStartLine(1094), org.kframework.attributes.Location(Location(1094,8,1094,164)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I2 requires `_>=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(e1effeabf96bb3a3beffd5b679ad5df95c4f8bbf42872b0793331e52a8470fb3), contentStartColumn(8), contentStartLine(1105), org.kframework.attributes.Location(Location(1105,8,1105,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I1 requires `_<=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(fb09b6acc4366cb77203e07c4efe8a9cf304e1bac9fb0664deea05d3eb9a80c6), contentStartColumn(8), contentStartLine(1104), org.kframework.attributes.Location(Location(1104,8,1104,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `freshInt(_)_INT_Int_Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cf2cb8f038b4bdc4edb1334a3b8ced9cd296a7af43f0a1916e082a4e1aefa08b), contentStartColumn(8), contentStartLine(1111), org.kframework.attributes.Location(Location(1111,8,1111,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_modInt_`(`_>>Int_`(I,IDX),`_<<Int_`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(147fc15c2ec6c36de1a9c0cad6212b8acd8b224f21c0aeabd36726e9c8a06119), contentStartColumn(8), contentStartLine(1092), org.kframework.attributes.Location(Location(1092,8,1092,85)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_modInt_`(I1,I2)=>`_%Int_`(`_+Int_`(`_%Int_`(I1,`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(adfacb58b0678a49f66186954229939a953c9849d5b08edc8f887c0d7514b2c6), concrete, contentStartColumn(5), contentStartLine(1099), org.kframework.attributes.Location(Location(1099,5,1102,23)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), simplification]
  rule `_dividesInt__INT-COMMON_Bool_Int_Int`(I1,I2)=>`_==Int_`(`_%Int_`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fd8facae0061fe5bc5c406f7ad2ed5d8d21960bf1118c9b240451253064dadb5), contentStartColumn(8), contentStartLine(1108), org.kframework.attributes.Location(Location(1108,8,1108,58)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_divInt_`(I1,I2)=>`_/Int_`(`_-Int_`(I1,`_modInt_`(I1,I2)),I2) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(83dcf9bc8c69f131715bc7a92d06c99b9a2b5f4c4fdafb69e6fdb2f1822712d4), contentStartColumn(8), contentStartLine(1096), org.kframework.attributes.Location(Location(1096,8,1097,23)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `_=/=Int_`(I1,I2)=>`notBool_`(`_==Int_`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4de6e05b11cdbed7ef5cb4c952127924661af4744c1e495370e1c8a962ba7be3), contentStartColumn(8), contentStartLine(1107), org.kframework.attributes.Location(Location(1107,8,1107,53)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module INT$SYNTAX [org.kframework.attributes.Location(Location(1085,1,1115,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL$SYNTAX
  imports INT-SYMBOLIC$SYNTAX
  imports INT-KORE$SYNTAX
  imports INT-KAST$SYNTAX
  imports INT-COMMON$SYNTAX
  syntax K ::= "srandInt" "(" Int ")" [function, hook(INT.srand), klabel(srandInt)]
  syntax Int ::= "randInt" "(" Int ")" [function, hook(INT.rand), klabel(randInt)]
  syntax Int ::= "freshInt" "(" Int ")" [freshGenerator, function, functional, klabel(freshInt)]
endmodule


module INT-COMMON [org.kframework.attributes.Location(Location(888,1,1020,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX
  imports INT-COMMON$SYNTAX
  imports BOOL
endmodule


module INT-COMMON$SYNTAX [org.kframework.attributes.Location(Location(888,1,1020,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
  syntax priority ~Int_ > _^Int_ _^%Int__ > _divInt_ _%Int_ _/Int_ _*Int_ _modInt_ > _+Int_ _-Int_ > _>>Int_ _<<Int_ > _&Int_ > _xorInt_ > _|Int_
  syntax associativity left _|Int_
  syntax associativity left _xorInt_
  syntax associativity left _modInt_
  syntax associativity left _divInt_ _%Int_ _/Int_ _*Int_ _modInt_
  syntax associativity left _divInt_
  syntax associativity left _^Int_ _^%Int__
  syntax associativity left _^Int_
  syntax associativity left _^%Int__
  syntax associativity left _>Int_
  syntax associativity left _>>Int_ _<<Int_
  syntax associativity left _>>Int_
  syntax associativity left _>=Int_
  syntax associativity left _==Int_
  syntax associativity left _=/=Int_
  syntax associativity left _<Int_
  syntax associativity left _<=Int_
  syntax associativity left _<<Int_
  syntax associativity left _/Int_
  syntax associativity left _-Int_
  syntax associativity left _+Int_ _-Int_
  syntax associativity left _+Int_
  syntax associativity left _*Int_
  syntax associativity left _&Int_
  syntax associativity left _%Int_
  syntax Int ::= Int "|Int" Int [function, functional, hook(INT.or), klabel(_|Int_), latex({#1}\mathrel{|_{\scriptstyle\it Int}}{#2}), left, smtlib(orInt), symbol]
  syntax Int ::= Int "xorInt" Int [function, functional, hook(INT.xor), klabel(_xorInt_), latex({#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}), left, smtlib(xorInt), symbol]
  syntax Int ::= Int "modInt" Int [function, hook(INT.emod), klabel(_modInt_), left, smt-hook(mod), symbol]
  syntax Int ::= Int "divInt" Int [function, hook(INT.ediv), klabel(_divInt_), left, smt-hook(div), symbol]
  syntax Int ::= Int "^Int" Int [function, hook(INT.pow), klabel(_^Int_), latex({#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}), left, smt-hook(^), symbol]
  syntax Int ::= Int "^%Int" Int Int [function, hook(INT.powmod), klabel(_^%Int__), left, smt-hook((mod (^ #1 #2) #3)), symbol]
  syntax Int ::= Int ">>Int" Int [function, hook(INT.shr), klabel(_>>Int_), latex({#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}), left, smtlib(shrInt), symbol]
  syntax Int ::= Int "<<Int" Int [function, hook(INT.shl), klabel(_<<Int_), latex({#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}), left, smtlib(shlInt), symbol]
  syntax Int ::= Int "/Int" Int [function, hook(INT.tdiv), klabel(_/Int_), latex({#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}), left, smt-hook(div), symbol]
  syntax Int ::= Int "-Int" Int [function, functional, hook(INT.sub), klabel(_-Int_), latex({#1}\mathrel{-_{\scriptstyle\it Int}}{#2}), left, smt-hook(-), symbol]
  syntax Int ::= Int "+Int" Int [function, functional, hook(INT.add), klabel(_+Int_), latex({#1}\mathrel{+_{\scriptstyle\it Int}}{#2}), left, smt-hook(+), symbol]
  syntax Int ::= Int "*Int" Int [function, functional, hook(INT.mul), klabel(_*Int_), latex({#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}), left, smt-hook(*), symbol]
  syntax Int ::= Int "&Int" Int [function, functional, hook(INT.and), klabel(_&Int_), latex({#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}), left, smtlib(andInt), symbol]
  syntax Int ::= Int "%Int" Int [function, hook(INT.tmod), klabel(_%Int_), latex({#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}), left, smt-hook(mod), symbol]
  syntax Int ::= "~Int" Int [function, functional, hook(INT.not), klabel(~Int_), latex(\mathop{\sim_{\scriptstyle\it Int}}{#1}), smtlib(notInt), symbol]
  syntax Int ::= "signExtendBitRangeInt" "(" Int "," Int "," Int ")" [function, hook(INT.signExtendBitRange), klabel(signExtendBitRangeInt)]
  syntax Int ::= "minInt" "(" Int "," Int ")" [function, functional, hook(INT.min), smt-hook((ite (< #1 #2) #1 #2))]
  syntax Int ::= "maxInt" "(" Int "," Int ")" [function, functional, hook(INT.max), smt-hook((ite (< #1 #2) #2 #1))]
  syntax Int ::= "log2Int" "(" Int ")" [function, hook(INT.log2), klabel(log2Int)]
  syntax Int ::= "bitRangeInt" "(" Int "," Int "," Int ")" [function, hook(INT.bitRange), klabel(bitRangeInt)]
  syntax Int ::= "absInt" "(" Int ")" [function, functional, hook(INT.abs), klabel(absInt), smt-hook((ite (< #1 0) (- 0 #1) #1))]
  syntax Bool ::= Int "dividesInt" Int [function]
  syntax Bool ::= Int ">Int" Int [function, functional, hook(INT.gt), klabel(_>Int_), latex({#1}\mathrel{>_{\scriptstyle\it Int}}{#2}), left, smt-hook(>), symbol]
  syntax Bool ::= Int ">=Int" Int [function, functional, hook(INT.ge), klabel(_>=Int_), latex({#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}), left, smt-hook(>=), symbol]
  syntax Bool ::= Int "==Int" Int [function, functional, hook(INT.eq), klabel(_==Int_), latex({#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}), left, smt-hook(=), symbol]
  syntax Bool ::= Int "=/=Int" Int [function, functional, hook(INT.ne), klabel(_=/=Int_), latex({#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}), left, smt-hook(distinct), symbol]
  syntax Bool ::= Int "<Int" Int [function, functional, hook(INT.lt), klabel(_<Int_), latex({#1}\mathrel{<_{\scriptstyle\it Int}}{#2}), left, smt-hook(<), symbol]
  syntax Bool ::= Int "<=Int" Int [function, functional, hook(INT.le), klabel(_<=Int_), latex({#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}), left, smt-hook(<=), symbol]
endmodule


module INT-KAST$SYNTAX [kast, org.kframework.attributes.Location(Location(1069,1,1075,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL$SYNTAX
  imports INT-COMMON$SYNTAX
endmodule


module INT-KORE [kore, org.kframework.attributes.Location(Location(1077,1,1083,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL
  imports INT-KORE$SYNTAX
  imports INT-COMMON
  rule `_==K_`(I1,I2)=>`_==Int_`(I1,I2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8bf41fa14e6cef57ebcd77d165461911b0f45874319eafd20a311466ff77ac6f), contentStartColumn(8), contentStartLine(1081), org.kframework.attributes.Location(Location(1081,8,1081,40)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module INT-KORE$SYNTAX [kore, org.kframework.attributes.Location(Location(1077,1,1083,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL$SYNTAX
  imports INT-COMMON$SYNTAX
endmodule


module INT-SYMBOLIC [org.kframework.attributes.Location(Location(1022,1,1038,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports INT-SYMBOLIC-KORE
  imports INT-SYMBOLIC$SYNTAX
  imports INT-COMMON
  rule `_modInt_`(X,N)=>X requires `_andBool_`(`_<=Int_`(#token("0","Int"),X),`_<Int_`(X,N)) ensures #token("true","Bool") [UNIQUE_ID(3a397a001af2fcd0eaf3c29fa026cf37c07fb9b8d6245bae8906780b5e74f503), contentStartColumn(8), contentStartLine(1030), org.kframework.attributes.Location(Location(1030,8,1030,59)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), simplification]
  rule `_>>Int_`(X,#token("0","Int"))=>X requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(572bf49a8ddd18981c88d4573e09bebfa4ca9f0d3d1caaea04d9fa30b5d20c39), contentStartColumn(8), contentStartLine(1036), org.kframework.attributes.Location(Location(1036,8,1036,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule `_>>Int_`(#token("0","Int"),_0)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1cf22edfe70c5e6f01624499522c9b110616a96e9f7894de7508ebb4a51091b9), contentStartColumn(8), contentStartLine(1037), org.kframework.attributes.Location(Location(1037,8,1037,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule `_<<Int_`(X,#token("0","Int"))=>X requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d9cace14bde6a604c371ca45e9ea6900a124efc18d91742ed49ef2efd97baa33), contentStartColumn(8), contentStartLine(1034), org.kframework.attributes.Location(Location(1034,8,1034,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule `_<<Int_`(#token("0","Int"),_0)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2d402e237d3a3b4ebf2358cc61e77cbb3ec03989d9be016003b2916d1935a8e9), contentStartColumn(8), contentStartLine(1035), org.kframework.attributes.Location(Location(1035,8,1035,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule `_-Int_`(I,#token("0","Int"))=>I requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d86d26d8f81aca004f9bc8ad3e99c8c73cbf1c3dd4c60d3f44c3a524af1dff49), contentStartColumn(8), contentStartLine(1028), org.kframework.attributes.Location(Location(1028,8,1028,21)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule `_+Int_`(I,#token("0","Int"))=>I requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d8b4ae4926d8ec7b1d5abaa5fed68fd6c7f3f5a21c76a51231394a2b36fbf995), contentStartColumn(8), contentStartLine(1027), org.kframework.attributes.Location(Location(1027,8,1027,21)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule `_%Int_`(X,N)=>X requires `_andBool_`(`_<=Int_`(#token("0","Int"),X),`_<Int_`(X,N)) ensures #token("true","Bool") [UNIQUE_ID(3c6a6ed93c91491e78006950a229b91fe57edd207091cb418b88655e3af66f94), contentStartColumn(8), contentStartLine(1031), org.kframework.attributes.Location(Location(1031,8,1031,59)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), simplification]
endmodule


module INT-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(1022,1,1038,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports INT-SYMBOLIC-KORE$SYNTAX
  imports INT-COMMON$SYNTAX
endmodule


module INT-SYMBOLIC-KORE [kore, org.kframework.attributes.Location(Location(1040,1,1067,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports ML-SYNTAX
  imports INT-SYMBOLIC-KORE$SYNTAX
  imports INT-COMMON
  rule `_-Int_`(`_-Int_`(C,I2),I3)=>`_-Int_`(C,`_+Int_`(I2,I3)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2f0c45ab27fd9a31e04bd48a211c47471e15e88ed3a5ab72217ae49fc4480ba9), concrete(I2, I3), contentStartColumn(8), contentStartLine(1063), org.kframework.attributes.Location(Location(1063,8,1063,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(C)]
  rule `_-Int_`(I1,`_-Int_`(I2,C))=>`_+Int_`(`_-Int_`(I1,I2),C) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1c038450af0ca2c7dbe53cab1a50de6a5afebca70825506f82586b79697c8685), concrete(I1, I2), contentStartColumn(8), contentStartLine(1062), org.kframework.attributes.Location(Location(1062,8,1062,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(C)]
  rule `_-Int_`(I1,`_+Int_`(I2,C))=>`_-Int_`(`_-Int_`(I1,I2),C) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(40f6808fcbd77c0ad816055dc5c3128e2140c47840910c8141267828c3289f60), concrete(I1, I2), contentStartColumn(8), contentStartLine(1061), org.kframework.attributes.Location(Location(1061,8,1061,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(C)]
  rule `_-Int_`(I1,`_+Int_`(B,I3))=>`_-Int_`(`_-Int_`(I1,I3),B) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f3dfc3d737ef13caec61d97df64b52c7385de0bdcbe1ad7df52e5782b021d3bc), concrete(I1, I3), contentStartColumn(8), contentStartLine(1057), org.kframework.attributes.Location(Location(1057,8,1057,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(B)]
  rule `_-Int_`(A,I)=>`_+Int_`(A,`_-Int_`(#token("0","Int"),I)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5006e67cf607e7b0d114a5cf79189eef34941e4c1136f2bcfa0ecb4a5f409aaa), concrete(I), contentStartColumn(8), contentStartLine(1053), org.kframework.attributes.Location(Location(1053,8,1053,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification(51), symbolic(A)]
  rule `_+Int_`(`_-Int_`(I1,B),I3)=>`_-Int_`(`_+Int_`(I1,I3),B) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a0ccce19dfe6142c052181702bc6afa92bef00189634e2cd81e3df72d18b6f72), concrete(I1, I3), contentStartColumn(8), contentStartLine(1060), org.kframework.attributes.Location(Location(1060,8,1060,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(B)]
  rule `_+Int_`(`_+Int_`(A,I2),I3)=>`_+Int_`(A,`_+Int_`(I2,I3)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bd1f111a70bb9802e01754c9b95e7bbc5e924e2cd3749d93c73a02b7d01377a9), concrete(I2, I3), contentStartColumn(8), contentStartLine(1055), org.kframework.attributes.Location(Location(1055,8,1055,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(A)]
  rule `_+Int_`(I1,`_-Int_`(I2,C))=>`_-Int_`(`_+Int_`(I1,I2),C) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3f8e2290240b516c1395fc1e6f038dc63b8fe27951133eb2a64b65a0d71e1cf1), concrete(I1, I2), contentStartColumn(8), contentStartLine(1059), org.kframework.attributes.Location(Location(1059,8,1059,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(C)]
  rule `_+Int_`(I1,`_+Int_`(I2,C))=>`_+Int_`(`_+Int_`(I1,I2),C) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(945eee1b50c7ee86f3997715061349a7d77bf7ede65b292713da34b6ba2e568e), concrete(I1, I2), contentStartColumn(8), contentStartLine(1058), org.kframework.attributes.Location(Location(1058,8,1058,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(C)]
  rule `_+Int_`(I1,`_+Int_`(B,I3))=>`_+Int_`(B,`_+Int_`(I1,I3)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(268b9a7c15e96c6d7eca16bc9022dc880f06a15ca8018eb1854b9836fc3e965c), concrete(I1, I3), contentStartColumn(8), contentStartLine(1056), org.kframework.attributes.Location(Location(1056,8,1056,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(B)]
  rule `_+Int_`(I,B)=>`_+Int_`(B,I) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f414cbac7ca5c0f2f75da04135615fea6af0646bed9962865d7b02a45901a09b), concrete(I), contentStartColumn(8), contentStartLine(1052), org.kframework.attributes.Location(Location(1052,8,1052,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification(51), symbolic(B)]
  rule `_&Int_`(I1,`_&Int_`(I2,C))=>`_&Int_`(`_&Int_`(I1,I2),C) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1b7de709091a3290862d7a9ca2625659b666b89c5a3b27bdfee178b1628fd179), concrete(I1, I2), contentStartColumn(8), contentStartLine(1065), org.kframework.attributes.Location(Location(1065,8,1065,50)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification, symbolic(C)]
  rule #Ceil(`_modInt_`(@I1,@I2))=>#And(#And(#Equals(`_=/=Int_`(@I2,#token("0","Int")),#token("true","Bool")),#Ceil(@I1)),#Ceil(@I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f864cd1e17e48500bc78b5fa83b901031cdbfd8f0575388667ce1475a2a7f532), anywhere, contentStartColumn(8), contentStartLine(1047), org.kframework.attributes.Location(Location(1047,8,1047,102)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule #Ceil(`_>>Int_`(@I1,@I2))=>#And(#And(#Equals(`_>=Int_`(@I2,#token("0","Int")),#token("true","Bool")),#Ceil(@I1)),#Ceil(@I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8504798d0c71a9c32788426e50147e59ac302592e16aa6bae4511370fd436af8), anywhere, contentStartColumn(8), contentStartLine(1048), org.kframework.attributes.Location(Location(1048,8,1048,102)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule #Ceil(`_<<Int_`(@I1,@I2))=>#And(#And(#Equals(`_>=Int_`(@I2,#token("0","Int")),#token("true","Bool")),#Ceil(@I1)),#Ceil(@I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0b052005b3756fb7082a3e365e1de3b170b4b0d828aab504a9ec2cfd19666528), anywhere, contentStartColumn(8), contentStartLine(1049), org.kframework.attributes.Location(Location(1049,8,1049,102)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule #Ceil(`_/Int_`(@I1,@I2))=>#And(#And(#Equals(`_=/=Int_`(@I2,#token("0","Int")),#token("true","Bool")),#Ceil(@I1)),#Ceil(@I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1eefe48360417c30b8e5f115a539adbc38e337fa903d6c589811e7b619f8d1cd), anywhere, contentStartColumn(8), contentStartLine(1045), org.kframework.attributes.Location(Location(1045,8,1045,102)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
  rule #Ceil(`_%Int_`(@I1,@I2))=>#And(#And(#Equals(`_=/=Int_`(@I2,#token("0","Int")),#token("true","Bool")),#Ceil(@I1)),#Ceil(@I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(277564ad2537209fd698729ceaa01973f97125176cf1078f98e2edb7cc190f34), anywhere, contentStartColumn(8), contentStartLine(1046), org.kframework.attributes.Location(Location(1046,8,1046,102)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), simplification]
endmodule


module INT-SYMBOLIC-KORE$SYNTAX [kore, org.kframework.attributes.Location(Location(1040,1,1067,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports ML-SYNTAX$SYNTAX
  imports INT-COMMON$SYNTAX
endmodule


module INT-SYNTAX [org.kframework.attributes.Location(Location(883,1,886,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  imports INT-SYNTAX$SYNTAX
endmodule


module INT-SYNTAX [org.kframework.attributes.Location(Location(883,1,886,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  imports INT-SYNTAX$SYNTAX
endmodule


module INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(883,1,886,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  syntax K
  syntax Int ::= r"[\\+-]?[0-9]+" [prec(2), prefer, token]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(883,1,886,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  syntax K
  syntax Int ::= r"[\\+-]?[0-9]+" [prec(2), prefer, token]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module K [org.kframework.attributes.Location(Location(447,1,475,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES
  imports REQUIRES-ENSURES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports KREWRITE
  imports K-SORT-LATTICE
  imports K$SYNTAX
  imports AUTO-FOLLOW
  imports AUTO-CASTS
endmodule


module K$SYNTAX [org.kframework.attributes.Location(Location(447,1,475,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES$SYNTAX
  imports REQUIRES-ENSURES$SYNTAX
  imports RECORD-PRODUCTIONS$SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports KREWRITE$SYNTAX
  imports K-SORT-LATTICE$SYNTAX
  imports AUTO-FOLLOW$SYNTAX
  imports AUTO-CASTS$SYNTAX
  syntax {Sort} Sort ::= Sort "#as" Sort [klabel(#KAs), symbol]
  syntax {Sort} Sort ::= "#fun" "(" Sort ")" "(" Sort ")" [klabel(#fun2), prefer, symbol]
  syntax {Sort1, Sort2} Sort1 ::= "#fun" "(" Sort2 "=>" Sort1 ")" "(" Sort2 ")" [klabel(#fun3), symbol]
  syntax associativity left _:=K_ _:/=K_
  syntax Bool ::= K ":=K" K [equalEqualK, function, functional, klabel(_:=K_), symbol]
  syntax Bool ::= K ":/=K" K [function, functional, klabel(_:/=K_), notEqualEqualK, symbol]
endmodule


module K-AMBIGUITIES [org.kframework.attributes.Location(Location(540,1,544,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports K-AMBIGUITIES$SYNTAX
endmodule


module K-AMBIGUITIES$SYNTAX [org.kframework.attributes.Location(Location(540,1,544,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax {Sort} Sort ::= "amb" "(" Sort "," Sort ")" [klabel(amb), symbol]
endmodule


module K-BOTTOM-SORT [org.kframework.attributes.Location(Location(362,1,366,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  imports K-BOTTOM-SORT$SYNTAX
endmodule


module K-BOTTOM-SORT$SYNTAX [org.kframework.attributes.Location(Location(362,1,366,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT$SYNTAX
  syntax {Sort} Sort ::= KBott
  syntax KItem ::= KBott
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module K-EQUAL [org.kframework.attributes.Location(Location(2018,1,2029,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX
  imports K-EQUAL-KORE
  imports K-EQUAL$SYNTAX
  imports BOOL
  rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bccaba7335e4cd77501a0667f2f7b3eb4a2105d5f60d804915dd4b1b08902c0c), contentStartColumn(8), contentStartLine(2024), org.kframework.attributes.Location(Location(2024,8,2024,45)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(C,_0,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [UNIQUE_ID(651bff3fa53d464ac7dd7aa77e1ef6071e14c959eb6df97baa325e2ad300daaa), contentStartColumn(8), contentStartLine(2027), org.kframework.attributes.Location(Location(2027,8,2027,67)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(C,B1,_0)=>B1 requires C ensures #token("true","Bool") [UNIQUE_ID(2b32069ac3f589174502fa507ebc88fab7c902854c0a9baa8ab09beb551232e2), contentStartColumn(8), contentStartLine(2026), org.kframework.attributes.Location(Location(2026,8,2026,59)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
endmodule


module K-EQUAL$SYNTAX [org.kframework.attributes.Location(Location(2018,1,2029,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX$SYNTAX
  imports K-EQUAL-KORE$SYNTAX
  imports K-EQUAL-KAST$SYNTAX
  imports BOOL$SYNTAX
endmodule


module K-EQUAL-KAST$SYNTAX [kast, org.kframework.attributes.Location(Location(2010,1,2016,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
endmodule


module K-EQUAL-KORE [kore, org.kframework.attributes.Location(Location(2002,1,2008,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX
  imports K-EQUAL-KORE$SYNTAX
  imports BOOL
  rule `_==K_`(K1,K2)=>`_==Bool_`(K1,K2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(51ca403f7048793055685a9e3a051e86807f14b2d4901ae81d0b4eedff7b1d77), contentStartColumn(8), contentStartLine(2006), org.kframework.attributes.Location(Location(2006,8,2006,43)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module K-EQUAL-KORE$SYNTAX [kore, org.kframework.attributes.Location(Location(2002,1,2008,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX$SYNTAX
  imports BOOL$SYNTAX
endmodule


module K-EQUAL-SYNTAX [org.kframework.attributes.Location(Location(1988,1,2000,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX$SYNTAX
  imports BOOL
  imports BASIC-K
endmodule


module K-EQUAL-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1988,1,2000,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BOOL$SYNTAX
  imports BASIC-K$SYNTAX
  syntax {Sort} Sort ::= "#if" Bool "#then" Sort "#else" Sort "#fi" [function, functional, hook(KEQUAL.ite), smt-hook(ite)]
  syntax priority _:=K_ _=/=K_ _:/=K_ _==K_ > weakAlwaysFinally #And _orElseBool_ weakExistsFinally _orBool_ #Implies _andThenBool_ _impliesBool_ #Floor #Exists #Ceil _andBool_ #Forall #Not #Or notBool_ #AG #Equals _xorBool_
  syntax associativity left _=/=K_ _==K_
  syntax Bool ::= K "==K" K [equalEqualK, function, functional, hook(KEQUAL.eq), klabel(_==K_), latex({#1}\mathrel{=_K}{#2}), smt-hook(=), symbol]
  syntax Bool ::= K "=/=K" K [function, functional, hook(KEQUAL.ne), klabel(_=/=K_), latex({#1}\mathrel{\neq_K}{#2}), notEqualEqualK, smt-hook(distinct), symbol]
endmodule


module K-IO [org.kframework.attributes.Location(Location(2101,1,2365,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports LIST
  imports K-IO$SYNTAX
  rule `#stdout_K-IO_Int`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4ad4f379ff9db687ff9dfd1b15052edbcd3342a2ed262ecdd38c769e177a592c), contentStartColumn(8), contentStartLine(2304), org.kframework.attributes.Location(Location(2304,8,2304,20)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#stdin_K-IO_Int`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c7ffdc9908c28a954521816d680f4e5ec44a679c7231a8dd09d4700f50b6d8c3), contentStartColumn(8), contentStartLine(2303), org.kframework.attributes.Location(Location(2303,8,2303,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#stderr_K-IO_Int`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(75e0a8082acda4cf1e29caa6aaafb7f9a421e16421a41f2006943d6fab17a162), contentStartColumn(8), contentStartLine(2305), org.kframework.attributes.Location(Location(2305,8,2305,20)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#open(_)_K-IO_IOInt_String`(S)=>`#open(_,_)_K-IO_IOInt_String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7ad2779cd54b9009119458217cae5138026cc4ff244e54c28e64db21100f63d9), contentStartColumn(8), contentStartLine(2208), org.kframework.attributes.Location(Location(2208,8,2208,48)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module K-IO$SYNTAX [org.kframework.attributes.Location(Location(2101,1,2365,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING$SYNTAX
  imports LIST$SYNTAX
  syntax String ::= "path" "(" IOFile ")" [function]
  syntax Stream ::= "project:Stream" "(" K ")" [function, projection]
  syntax Stream ::= "#buffer" "(" K ")" [klabel(#buffer)]
  syntax KItem ::= Stream
  syntax KItem ::= IOString
  syntax KItem ::= IOInt
  syntax KItem ::= IOFile
  syntax KItem ::= IOError
  syntax KItem ::= "#systemResult" "(" Int "," String "," String ")" [klabel(#systemResult), symbol]
  syntax KItem ::= "#system" "(" String ")" [function, hook(IO.system), impure, klabel(#system)]
  syntax K ::= "#write" "(" Int "," String ")" [function, hook(IO.write), impure]
  syntax K ::= "#unlock" "(" Int "," Int ")" [function, hook(IO.unlock), impure]
  syntax K ::= "#shutdownWrite" "(" Int ")" [function, hook(IO.shutdownWrite), impure]
  syntax K ::= "#seekEnd" "(" Int "," Int ")" [function, hook(IO.seekEnd), impure]
  syntax K ::= "#seek" "(" Int "," Int ")" [function, hook(IO.seek), impure]
  syntax K ::= "#remove" "(" String ")" [function, functional, hook(IO.remove), impure, klabel(#remove)]
  syntax K ::= "#putc" "(" Int "," Int ")" [function, hook(IO.putc), impure]
  syntax K ::= "#logToFile" "(" String "," String ")" [function, functional, hook(IO.log), impure, klabel(#logToFile), returnsUnit, symbol]
  syntax K ::= "#lock" "(" Int "," Int ")" [function, hook(IO.lock), impure]
  syntax K ::= "#close" "(" Int ")" [function, hook(IO.close), impure]
  syntax K
  syntax Int ::= "fd" "(" IOFile ")" [function]
  syntax Int ::= "errno" "(" IOError ")" [function]
  syntax Int ::= "#time" "(" ")" [function, hook(IO.time), impure]
  syntax Int ::= "#stdout" [function, functional]
  syntax Int ::= "#stdin" [function, functional]
  syntax Int ::= "#stderr" [function, functional]
  syntax IOString ::= String
  syntax IOString ::= IOError
  syntax IOString ::= "project:IOString" "(" K ")" [function, projection]
  syntax IOString ::= "#read" "(" Int "," Int ")" [function, hook(IO.read), impure]
  syntax IOInt ::= Int
  syntax IOInt ::= IOError
  syntax IOInt ::= "project:IOInt" "(" K ")" [function, projection]
  syntax IOInt ::= "#tell" "(" Int ")" [function, hook(IO.tell), impure]
  syntax IOInt ::= "#open" "(" String "," String ")" [function, hook(IO.open), impure]
  syntax IOInt ::= "#open" "(" String ")" [function]
  syntax IOInt ::= "#getc" "(" Int ")" [function, hook(IO.getc), impure]
  syntax IOInt ::= "#accept" "(" Int ")" [function, hook(IO.accept), impure]
  syntax IOFile ::= IOError
  syntax IOFile ::= "project:IOFile" "(" K ")" [function, projection]
  syntax IOFile ::= "#tempFile" "(" String "," Int ")" [klabel(#tempFile), symbol]
  syntax IOFile ::= "#mkstemp" "(" String ")" [function, hook(IO.mkstemp), impure, klabel(#mkstemp)]
  syntax IOError ::= "project:IOError" "(" K ")" [function, projection]
  syntax IOError ::= "#unknownIOError" "(" Int ")" [klabel(#unknownIOError), symbol]
  syntax IOError ::= "#EXDEV" [klabel(#EXDEV), symbol]
  syntax IOError ::= "#EWOULDBLOCK" [klabel(#EWOULDBLOCK), symbol]
  syntax IOError ::= "#ETOOMANYREFS" [klabel(#ETOOMANYREFS), symbol]
  syntax IOError ::= "#ETIMEDOUT" [klabel(#ETIMEDOUT), symbol]
  syntax IOError ::= "#ESRCH" [klabel(#ESRCH), symbol]
  syntax IOError ::= "#ESPIPE" [klabel(#ESPIPE), symbol]
  syntax IOError ::= "#ESOCKTNOSUPPORT" [klabel(#ESOCKTNOSUPPORT), symbol]
  syntax IOError ::= "#ESHUTDOWN" [klabel(#ESHUTDOWN), symbol]
  syntax IOError ::= "#EROFS" [klabel(#EROFS), symbol]
  syntax IOError ::= "#ERANGE" [klabel(#ERANGE), symbol]
  syntax IOError ::= "#EPROTOTYPE" [klabel(#EPROTOTYPE), symbol]
  syntax IOError ::= "#EPROTONOSUPPORT" [klabel(#EPROTONOSUPPORT), symbol]
  syntax IOError ::= "#EPIPE" [klabel(#EPIPE), symbol]
  syntax IOError ::= "#EPFNOSUPPORT" [klabel(#EPFNOSUPPORT), symbol]
  syntax IOError ::= "#EPERM" [klabel(#EPERM), symbol]
  syntax IOError ::= "#EOVERFLOW" [klabel(#EOVERFLOW), symbol]
  syntax IOError ::= "#EOPNOTSUPP" [klabel(#EOPNOTSUPP), symbol]
  syntax IOError ::= "#EOF" [klabel(#EOF), symbol]
  syntax IOError ::= "#ENXIO" [klabel(#ENXIO), symbol]
  syntax IOError ::= "#ENOTTY" [klabel(#ENOTTY), symbol]
  syntax IOError ::= "#ENOTSOCK" [klabel(#ENOTSOCK), symbol]
  syntax IOError ::= "#ENOTEMPTY" [klabel(#ENOTEMPTY), symbol]
  syntax IOError ::= "#ENOTDIR" [klabel(#ENOTDIR), symbol]
  syntax IOError ::= "#ENOTCONN" [klabel(#ENOTCONN), symbol]
  syntax IOError ::= "#ENOSYS" [klabel(#ENOSYS), symbol]
  syntax IOError ::= "#ENOSPC" [klabel(#ENOSPC), symbol]
  syntax IOError ::= "#ENOPROTOOPT" [klabel(#ENOPROTOOPT), symbol]
  syntax IOError ::= "#ENOMEM" [klabel(#ENOMEM), symbol]
  syntax IOError ::= "#ENOLCK" [klabel(#ENOLCK), symbol]
  syntax IOError ::= "#ENOEXEC" [klabel(#ENOEXEC), symbol]
  syntax IOError ::= "#ENOENT" [klabel(#ENOENT), symbol]
  syntax IOError ::= "#ENODEV" [klabel(#ENODEV), symbol]
  syntax IOError ::= "#ENOBUFS" [klabel(#ENOBUFS), symbol]
  syntax IOError ::= "#ENFILE" [klabel(#ENFILE), symbol]
  syntax IOError ::= "#ENETUNREACH" [klabel(#ENETUNREACH), symbol]
  syntax IOError ::= "#ENETRESET" [klabel(#ENETRESET), symbol]
  syntax IOError ::= "#ENETDOWN" [klabel(#ENETDOWN), symbol]
  syntax IOError ::= "#ENAMETOOLONG" [klabel(#ENAMETOOLONG), symbol]
  syntax IOError ::= "#EMSGSIZE" [klabel(#EMSGSIZE), symbol]
  syntax IOError ::= "#EMLINK" [klabel(#EMLINK), symbol]
  syntax IOError ::= "#EMFILE" [klabel(#EMFILE), symbol]
  syntax IOError ::= "#ELOOP" [klabel(#ELOOP), symbol]
  syntax IOError ::= "#EISDIR" [klabel(#EISDIR), symbol]
  syntax IOError ::= "#EISCONN" [klabel(#EISCONN), symbol]
  syntax IOError ::= "#EIO" [klabel(#EIO), symbol]
  syntax IOError ::= "#EINVAL" [klabel(#EINVAL), symbol]
  syntax IOError ::= "#EINTR" [klabel(#EINTR), symbol]
  syntax IOError ::= "#EINPROGRESS" [klabel(#EINPROGRESS), symbol]
  syntax IOError ::= "#EHOSTUNREACH" [klabel(#EHOSTUNREACH), symbol]
  syntax IOError ::= "#EHOSTDOWN" [klabel(#EHOSTDOWN), symbol]
  syntax IOError ::= "#EFBIG" [klabel(#EFBIG), symbol]
  syntax IOError ::= "#EFAULT" [klabel(#EFAULT), symbol]
  syntax IOError ::= "#EEXIST" [klabel(#EEXIST), symbol]
  syntax IOError ::= "#EDOM" [klabel(#EDOM), symbol]
  syntax IOError ::= "#EDESTADDRREQ" [klabel(#EDESTADDRREQ), symbol]
  syntax IOError ::= "#EDEADLK" [klabel(#EDEADLK), symbol]
  syntax IOError ::= "#ECONNRESET" [klabel(#ECONNRESET), symbol]
  syntax IOError ::= "#ECONNREFUSED" [klabel(#ECONNREFUSED), symbol]
  syntax IOError ::= "#ECONNABORTED" [klabel(#ECONNABORTED), symbol]
  syntax IOError ::= "#ECHILD" [klabel(#ECHILD), symbol]
  syntax IOError ::= "#EBUSY" [klabel(#EBUSY), symbol]
  syntax IOError ::= "#EBADF" [klabel(#EBADF), symbol]
  syntax IOError ::= "#EALREADY" [klabel(#EALREADY), symbol]
  syntax IOError ::= "#EAGAIN" [klabel(#EAGAIN), symbol]
  syntax IOError ::= "#EAFNOSUPPORT" [klabel(#EAFNOSUPPORT), symbol]
  syntax IOError ::= "#EADDRNOTAVAIL" [klabel(#EADDRNOTAVAIL), symbol]
  syntax IOError ::= "#EADDRINUSE" [klabel(#EADDRINUSE), symbol]
  syntax IOError ::= "#EACCES" [klabel(#EACCES), symbol]
  syntax IOError ::= "#E2BIG" [klabel(#E2BIG), symbol]
  syntax Bool ::= "isStream" "(" K ")" [function, predicate(Stream)]
  syntax Bool ::= "isIOString" "(" K ")" [function, predicate(IOString)]
  syntax Bool ::= "isIOInt" "(" K ")" [function, predicate(IOInt)]
  syntax Bool ::= "isIOFile" "(" K ")" [function, predicate(IOFile)]
  syntax Bool ::= "isIOError" "(" K ")" [function, predicate(IOError)]
  rule `project:Stream`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOString`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOInt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOFile`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOError`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:#unknownIOError:errno`(#unknownIOError(K0))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  rule `project:#tempFile:path`(#tempFile(K0,K1))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  rule `project:#tempFile:fd`(#tempFile(K0,K1))=>K1 requires #token("true","Bool") ensures #token("true","Bool") 
endmodule


module K-LOCATIONS [org.kframework.attributes.Location(Location(557,1,564,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports STRING-SYNTAX
  imports K-LOCATIONS$SYNTAX
  imports INT-SYNTAX
endmodule


module K-LOCATIONS$SYNTAX [org.kframework.attributes.Location(Location(557,1,564,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports STRING-SYNTAX$SYNTAX
  imports INT-SYNTAX$SYNTAX
  syntax {Sort} Sort ::= "#location" "(" Sort "," String "," Int "," Int "," Int "," Int ")" [format(%3), klabel(#location), symbol]
endmodule


module K-REFLECTION [org.kframework.attributes.Location(Location(2047,1,2068,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports K-REFLECTION$SYNTAX
  imports BASIC-K
endmodule


module K-REFLECTION$SYNTAX [org.kframework.attributes.Location(Location(2047,1,2068,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING$SYNTAX
  imports BASIC-K$SYNTAX
  syntax {Sort} Sort ::= "#parseKORE" "(" String ")" [function, hook(KREFLECTION.parseKORE), klabel(#parseKORE)]
  syntax {Sort} Sort ::= "#parseKAST" "(" String ")" [function, hook(KREFLECTION.parseKAST), klabel(#parseKAST)]
  syntax String ::= "#sort" "(" K ")" [function, hook(KREFLECTION.sort), klabel(#sort)]
  syntax List ::= "project:List" "(" K ")" [function, projection]
  syntax List ::= "#argv" "(" ")" [function, hook(KREFLECTION.argv), klabel(#argv)]
  syntax KItem ::= List
  syntax KItem ::= IOError
  syntax KItem ::= "getKLabel" "(" K ")" [function, hook(KREFLECTION.getKLabel), klabel(getKLabel)]
  syntax KItem ::= "#fresh" "(" String ")" [function, hook(KREFLECTION.fresh), impure, klabel(#fresh)]
  syntax K ::= "#getenv" "(" String ")" [function, hook(KREFLECTION.getenv), impure, klabel(#getenv)]
  syntax K ::= "#configuration" [function, hook(KREFLECTION.configuration), impure]
  syntax K
  syntax IOError ::= "project:IOError" "(" K ")" [function, projection]
  syntax IOError ::= "#noParse" "(" String ")" [klabel(#noParse), symbol]
  syntax Bool ::= "isList" "(" K ")" [function, predicate(List)]
  syntax Bool ::= "isIOError" "(" K ")" [function, predicate(IOError)]
  rule `project:List`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOError`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module K-SORT-LATTICE [org.kframework.attributes.Location(Location(368,1,371,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports K-TOP-SORT
  imports K-SORT-LATTICE$SYNTAX
  imports K-BOTTOM-SORT
endmodule


module K-SORT-LATTICE$SYNTAX [org.kframework.attributes.Location(Location(368,1,371,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports K-TOP-SORT$SYNTAX
  imports K-BOTTOM-SORT$SYNTAX
endmodule


module K-TERM [org.kframework.attributes.Location(Location(478,1,486,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports KREWRITE
  imports K-TERM$SYNTAX
  imports K-SORT-LATTICE
  imports AUTO-FOLLOW
  imports AUTO-CASTS
endmodule


module K-TERM$SYNTAX [org.kframework.attributes.Location(Location(478,1,486,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES$SYNTAX
  imports RECORD-PRODUCTIONS$SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports KREWRITE$SYNTAX
  imports K-SORT-LATTICE$SYNTAX
  imports AUTO-FOLLOW$SYNTAX
  imports AUTO-CASTS$SYNTAX
endmodule


module K-TOP-SORT [org.kframework.attributes.Location(Location(356,1,360,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  imports K-TOP-SORT$SYNTAX
endmodule


module K-TOP-SORT$SYNTAX [org.kframework.attributes.Location(Location(356,1,360,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT$SYNTAX
  syntax {Sort} KItem ::= Sort
  syntax KItem ::= KBott
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KAST [org.kframework.attributes.Location(Location(72,1,92,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  imports KSTRING
  imports KAST$SYNTAX
  imports BUILTIN-ID-TOKENS
  imports BASIC-K
endmodule


module KAST$SYNTAX [org.kframework.attributes.Location(Location(72,1,92,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT$SYNTAX
  imports KSTRING$SYNTAX
  imports BUILTIN-ID-TOKENS$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left #KList
  syntax KList ::= KList "," KList [assoc, klabel(#KList), left, prefer, symbol, unit(#EmptyKList)]
  syntax KList ::= K
  syntax KList ::= ".KList" [klabel(#EmptyKList), symbol]
  syntax KList ::= ".::KList" [klabel(#EmptyKList), symbol]
  syntax KLabel ::= r"`(\\\\`|\\\\\\\\|[^`\\\\\\n\\r])+`" [token]
  syntax KLabel ::= r"(?<![a-zA-Z0-9])[#a-z][a-zA-Z0-9]*" [prec(1), token]
  syntax KLabel ::= #LowerId [token]
  syntax KItem ::= KBott
  syntax KBott ::= KLabel "(" KList ")" [klabel(#KApply), symbol]
  syntax KBott ::= "#token" "(" KString "," KString ")" [klabel(#KToken), symbol]
  syntax KBott ::= "#klabel" "(" KLabel ")" [klabel(#WrappedKLabel), symbol]
  syntax K
  syntax Bool ::= "isKList" "(" K ")" [function, predicate(KList)]
  syntax Bool ::= "isKLabel" "(" K ")" [function, predicate(KLabel)]
endmodule


module KCELLS [org.kframework.attributes.Location(Location(240,1,253,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KCELLS$SYNTAX
  imports KAST
endmodule


module KCELLS$SYNTAX [org.kframework.attributes.Location(Location(240,1,253,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KAST$SYNTAX
  syntax associativity non-assoc #withConfig
  syntax associativity left #cells
  syntax KItem ::= Cell
  syntax KItem ::= Bag
  syntax K
  syntax Cell [org.kframework.attributes.Location(Location(243,3,243,13)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax Cell ::= "project:Cell" "(" K ")" [function, projection]
  syntax Bool ::= "isCell" "(" K ")" [function, predicate(Cell)]
  syntax Bool ::= "isBag" "(" K ")" [function, predicate(Bag)]
  syntax Bool ::= "is#RuleBody" "(" K ")" [function, predicate(#RuleBody)]
  syntax Bag ::= KBott
  syntax Bag ::= Cell
  syntax Bag ::= Bag Bag [assoc, klabel(#cells), left, symbol, unit(#cells)]
  syntax Bag ::= "project:Bag" "(" K ")" [function, projection]
  syntax Bag ::= ".Bag" [klabel(#cells), symbol]
  syntax Bag ::= ".::Bag" [klabel(#cells), symbol]
  syntax Bag ::= "(" Bag ")" [bracket, bracketLabel((_)_KCELLS_Bag_Bag)]
  syntax #RuleBody ::= "[" "[" K "]" "]" Bag [avoid, klabel(#withConfig), symbol]
  rule `project:Cell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bag`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KREWRITE [org.kframework.attributes.Location(Location(440,1,444,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KREWRITE$SYNTAX
endmodule


module KREWRITE$SYNTAX [org.kframework.attributes.Location(Location(440,1,444,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax {Sort} Sort ::= Sort "=>" Sort [klabel(#KRewrite), symbol]
  syntax priority #KRewrite > #withConfig
  syntax associativity non-assoc #KRewrite
endmodule


module KSEQ [org.kframework.attributes.Location(Location(96,1,105,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KSEQ$SYNTAX
  imports KAST
  imports K-TOP-SORT
endmodule


module KSEQ$SYNTAX [org.kframework.attributes.Location(Location(96,1,105,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KAST$SYNTAX
  imports K-TOP-SORT$SYNTAX
  syntax {Sort} Sort ::= "(" Sort ")" [bracket, bracketLabel((_)_KSEQ_Sort_Sort{Sort})]
  syntax associativity left #KSequence
  syntax K ::= K "~>" K [assoc, klabel(#KSequence), left, symbol, unit(#EmptyK)]
  syntax K ::= ".K" [klabel(#EmptyK), symbol, unparseAvoid]
  syntax K ::= ".::K" [klabel(#EmptyK), symbol, unparseAvoid]
  syntax K ::= "." [klabel(#EmptyK), symbol]
endmodule


module KSEQ-SYMBOLIC [org.kframework.attributes.Location(Location(205,1,216,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports ML-SYNTAX
  imports KVARIABLE-SYNTAX
  imports KSEQ-SYMBOLIC$SYNTAX
  imports KSEQ
endmodule


module KSEQ-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(205,1,216,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports ML-SYNTAX$SYNTAX
  imports KVARIABLE-SYNTAX$SYNTAX
  imports KSEQ$SYNTAX
  syntax KLabel ::= #KVariable
  syntax KConfigVar ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\$)([A-Z][A-Za-z0-9'_]*)" [token]
  syntax KBott ::= KConfigVar
  syntax KBott ::= #KVariable
  syntax #KVariable ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\!|\\?|@)?([A-Z][A-Za-z0-9'_]*|_|_[A-Z][A-Za-z0-9'_]*)" [prec(1), token]
  syntax #KVariable ::= #UpperId [token]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KSTRING$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KSTRING$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module KSTRING$SYNTAX [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKString" "(" K ")" [function, predicate(KString)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KSTRING$SYNTAX [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKString" "(" K ")" [function, predicate(KString)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KSTRING$SYNTAX [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKString" "(" K ")" [function, predicate(KString)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KVARIABLE-SYNTAX [org.kframework.attributes.Location(Location(200,1,202,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KVARIABLE-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module KVARIABLE-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(200,1,202,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "is#KVariable" "(" K ")" [function, predicate(#KVariable)]
  syntax #KVariable [org.kframework.attributes.Location(Location(201,3,201,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KVARIABLE-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(200,1,202,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#KVariable" "(" K ")" [function, predicate(#KVariable)]
  syntax #KVariable [org.kframework.attributes.Location(Location(201,3,201,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module LANGUAGE-PARSING
  imports UNISWAPV2-SYNTAX
  imports UNISWAPV2
  imports K-TERM
  imports ID-SYNTAX-PROGRAM-PARSING
endmodule


module LIST [not-lr1, org.kframework.attributes.Location(Location(618,1,733,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports LIST$SYNTAX
  imports INT-SYNTAX
  imports BASIC-K
endmodule


module LIST$SYNTAX [not-lr1, org.kframework.attributes.Location(Location(618,1,733,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _List_
  syntax List [hook(LIST.List), org.kframework.attributes.Location(Location(622,3,622,31)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax List ::= List List [assoc, element(ListItem), format(%1%n%2), function, functional, hook(LIST.concat), klabel(_List_), left, smtlib(smt_seq_concat), symbol, unit(.List)]
  syntax List ::= List "[" Int "<-" KItem "]" [function, hook(LIST.update), klabel(List:set)]
  syntax List ::= "updateList" "(" List "," Int "," List ")" [function, hook(LIST.updateAll), klabel(updateList)]
  syntax List ::= "range" "(" List "," Int "," Int ")" [function, hook(LIST.range), klabel(List:range), symbol]
  syntax List ::= "project:List" "(" K ")" [function, projection]
  syntax List ::= "makeList" "(" Int "," KItem ")" [function, hook(LIST.make), klabel(makeList)]
  syntax List ::= "fillList" "(" List "," Int "," Int "," KItem ")" [function, hook(LIST.fill), klabel(fillList)]
  syntax List ::= "ListItem" "(" KItem ")" [function, functional, hook(LIST.element), klabel(ListItem), smtlib(smt_seq_elem), symbol]
  syntax List ::= ".List" [function, functional, hook(LIST.unit), klabel(.List), latex(\dotCt{List}), smtlib(smt_seq_nil), symbol]
  syntax KItem ::= List "[" Int "]" [function, hook(LIST.get), klabel(List:get), symbol]
  syntax KItem ::= List
  syntax K
  syntax Int ::= "size" "(" List ")" [function, functional, hook(LIST.size), klabel(sizeList), smtlib(smt_seq_len)]
  syntax Bool ::= KItem "in" List [function, functional, hook(LIST.in), klabel(_inList_)]
  syntax Bool ::= "isList" "(" K ")" [function, predicate(List)]
  rule `project:List`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module MAP [org.kframework.attributes.Location(Location(216,1,408,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SET
  imports MAP$SYNTAX
  imports LIST
  imports INT-SYNTAX
  imports BOOL-SYNTAX
endmodule


module MAP$SYNTAX [org.kframework.attributes.Location(Location(216,1,408,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SET$SYNTAX
  imports LIST$SYNTAX
  imports INT-SYNTAX$SYNTAX
  imports BOOL-SYNTAX$SYNTAX
  syntax priority _|->_ > .Map _Map_
  syntax associativity non-assoc _|->_
  syntax associativity left _Map_
  syntax Set ::= "keys" "(" Map ")" [function, functional, hook(MAP.keys), klabel(keys)]
  syntax Map [hook(MAP.Map), org.kframework.attributes.Location(Location(222,3,222,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Map ::= Map Map [assoc, comm, element(_|->_), format(%1%n%2), function, hook(MAP.concat), index(0), klabel(_Map_), left, symbol, unit(.Map)]
  syntax Map ::= Map "[" KItem "<-" KItem "]" [function, functional, hook(MAP.update), klabel(Map:update), prefer, symbol]
  syntax Map ::= Map "[" KItem "<-" "undef" "]" [function, functional, hook(MAP.remove), klabel(_[_<-undef]), symbol]
  syntax Map ::= Map "-Map" Map [function, functional, hook(MAP.difference), latex({#1}-_{\it Map}{#2})]
  syntax Map ::= KItem "|->" KItem [function, functional, hook(MAP.element), klabel(_|->_), latex({#1}\mapsto{#2}), symbol]
  syntax Map ::= "updateMap" "(" Map "," Map ")" [function, functional, hook(MAP.updateAll), klabel(updateMap)]
  syntax Map ::= "removeAll" "(" Map "," Set ")" [function, functional, hook(MAP.removeAll), klabel(removeAll)]
  syntax Map ::= "project:Map" "(" K ")" [function, projection]
  syntax Map ::= ".Map" [function, functional, hook(MAP.unit), klabel(.Map), latex(\dotCt{Map}), symbol]
  syntax List ::= "values" "(" Map ")" [function, hook(MAP.values), klabel(values)]
  syntax List ::= "keys_list" "(" Map ")" [function, hook(MAP.keys_list)]
  syntax KItem ::= Map "[" KItem "]" [function, hook(MAP.lookup), klabel(Map:lookup), symbol]
  syntax KItem ::= Map "[" KItem "]" "orDefault" KItem [function, functional, hook(MAP.lookupOrDefault), klabel(Map:lookupOrDefault)]
  syntax KItem ::= Map
  syntax KItem ::= "choice" "(" Map ")" [function, hook(MAP.choice), klabel(Map:choice)]
  syntax K
  syntax Int ::= "size" "(" Map ")" [function, functional, hook(MAP.size), klabel(sizeMap)]
  syntax Bool ::= Map "<=Map" Map [function, functional, hook(MAP.inclusion)]
  syntax Bool ::= KItem "in_keys" "(" Map ")" [function, functional, hook(MAP.in_keys)]
  syntax Bool ::= "isMap" "(" K ")" [function, predicate(Map)]
  rule `project:Map`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module MAP-KORE-SYMBOLIC$SYNTAX [kore, org.kframework.attributes.Location(Location(410,1,449,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports MAP$SYNTAX
  imports K-EQUAL$SYNTAX
endmodule


module MAP-SYMBOLIC$SYNTAX [org.kframework.attributes.Location(Location(477,1,480,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports MAP-KORE-SYMBOLIC$SYNTAX
endmodule


module MINT$SYNTAX [org.kframework.attributes.Location(Location(2565,1,2728,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports MINT-SYNTAX$SYNTAX
  imports INT$SYNTAX
  syntax {Width} MInt{Width} ::= MInt{Width} "|MInt" MInt{Width} [function, functional, hook(MINT.or), smt-hook(bvor)]
  syntax {Width} MInt{Width} ::= MInt{Width} "xorMInt" MInt{Width} [function, functional, hook(MINT.xor), smt-hook(bvxor)]
  syntax {Width} MInt{Width} ::= MInt{Width} ">>lMInt" MInt{Width} [function, hook(MINT.lshr), smt-hook(bvlshr)]
  syntax {Width} MInt{Width} ::= MInt{Width} ">>aMInt" MInt{Width} [function, hook(MINT.ashr), smt-hook(bvashr)]
  syntax {Width} MInt{Width} ::= MInt{Width} "<<MInt" MInt{Width} [function, hook(MINT.shl), smt-hook(bvshl)]
  syntax {Width} MInt{Width} ::= MInt{Width} "/uMInt" MInt{Width} [function, hook(MINT.udiv), smt-hook(bvudiv)]
  syntax {Width} MInt{Width} ::= MInt{Width} "/sMInt" MInt{Width} [function, hook(MINT.sdiv), smt-hook(bvsdiv)]
  syntax {Width} MInt{Width} ::= MInt{Width} "-MInt" MInt{Width} [function, functional, hook(MINT.sub), smt-hook(bvsub)]
  syntax {Width} MInt{Width} ::= MInt{Width} "+MInt" MInt{Width} [function, functional, hook(MINT.add), smt-hook(bvadd)]
  syntax {Width} MInt{Width} ::= MInt{Width} "*MInt" MInt{Width} [function, functional, hook(MINT.mul), smt-hook(bvmul)]
  syntax {Width} MInt{Width} ::= MInt{Width} "&MInt" MInt{Width} [function, functional, hook(MINT.and), smt-hook(bvand)]
  syntax {Width} MInt{Width} ::= MInt{Width} "%uMInt" MInt{Width} [function, hook(MINT.urem), smt-hook(bvurem)]
  syntax {Width} MInt{Width} ::= MInt{Width} "%sMInt" MInt{Width} [function, hook(MINT.srem), smt-hook(bvsrem)]
  syntax {Width} MInt{Width} ::= "~MInt" MInt{Width} [function, functional, hook(MINT.not), smt-hook(bvnot)]
  syntax {Width} MInt{Width} ::= "uMinMInt" "(" MInt{Width} "," MInt{Width} ")" [function, functional, hook(MINT.umin), klabel(uMinMInt), smt-hook((ite (bvult #1 #2) #1 #2))]
  syntax {Width} MInt{Width} ::= "uMaxMInt" "(" MInt{Width} "," MInt{Width} ")" [function, functional, hook(MINT.umax), klabel(uMaxMInt), smt-hook((ite (bvult #1 #2) #2 #1))]
  syntax {Width} MInt{Width} ::= "sMinMInt" "(" MInt{Width} "," MInt{Width} ")" [function, functional, hook(MINT.smin), klabel(sMinMInt), smt-hook((ite (bvslt #1 #2) #1 #2))]
  syntax {Width} MInt{Width} ::= "sMaxMInt" "(" MInt{Width} "," MInt{Width} ")" [function, functional, hook(MINT.smax), klabel(sMaxMInt), smt-hook((ite (bvslt #1 #2) #2 #1))]
  syntax {Width} MInt{Width} ::= "Int2MInt" "(" Int ")" [function, functional, hook(MINT.integer), klabel(Int2MInt), smt-hook(int2bv)]
  syntax {Width} MInt{Width} ::= "--MInt" MInt{Width} [function, functional, hook(MINT.neg), smt-hook(bvuminus)]
  syntax {Width} Int ::= "bitwidthMInt" "(" MInt{Width} ")" [function, functional, hook(MINT.bitwidth), klabel(bitwidthMInt)]
  syntax {Width} Int ::= "MInt2Unsigned" "(" MInt{Width} ")" [function, functional, hook(MINT.uvalue), klabel(MInt2Unsigned), smt-hook(bv2int)]
  syntax {Width} Int ::= "MInt2Signed" "(" MInt{Width} ")" [function, functional, hook(MINT.svalue), klabel(MInt2Signed)]
  syntax {Width} Bool ::= MInt{Width} ">uMInt" MInt{Width} [function, functional, hook(MINT.ugt), smt-hook(bvugt)]
  syntax {Width} Bool ::= MInt{Width} ">sMInt" MInt{Width} [function, functional, hook(MINT.sgt), smt-hook(bvsgt)]
  syntax {Width} Bool ::= MInt{Width} ">=uMInt" MInt{Width} [function, functional, hook(MINT.uge), smt-hook(bvuge)]
  syntax {Width} Bool ::= MInt{Width} ">=sMInt" MInt{Width} [function, functional, hook(MINT.sge), smt-hook(bvsge)]
  syntax {Width} Bool ::= MInt{Width} "==MInt" MInt{Width} [function, functional, hook(MINT.eq), smt-hook(=)]
  syntax {Width} Bool ::= MInt{Width} "=/=MInt" MInt{Width} [function, functional, hook(MINT.ne), smt-hook(distinct)]
  syntax {Width} Bool ::= MInt{Width} "<uMInt" MInt{Width} [function, functional, hook(MINT.ult), smt-hook(bvult)]
  syntax {Width} Bool ::= MInt{Width} "<sMInt" MInt{Width} [function, functional, hook(MINT.slt), smt-hook(bvslt)]
  syntax {Width} Bool ::= MInt{Width} "<=uMInt" MInt{Width} [function, functional, hook(MINT.ule), smt-hook(bvule)]
  syntax {Width} Bool ::= MInt{Width} "<=sMInt" MInt{Width} [function, functional, hook(MINT.sle), smt-hook(bvsle)]
  syntax {Width1, Width2} MInt{Width1} ::= "roundMInt" "(" MInt{Width2} ")" [function, functional, hook(MINT.round), klabel(roundMInt)]
  syntax priority --MInt__MINT_MInt_MInt ~MInt__MINT_MInt_MInt > _/sMInt__MINT_MInt_MInt_MInt _*MInt__MINT_MInt_MInt_MInt _/uMInt__MINT_MInt_MInt_MInt _%uMInt__MINT_MInt_MInt_MInt _%sMInt__MINT_MInt_MInt_MInt > _+MInt__MINT_MInt_MInt_MInt _-MInt__MINT_MInt_MInt_MInt > _<<MInt__MINT_MInt_MInt_MInt _>>aMInt__MINT_MInt_MInt_MInt _>>lMInt__MINT_MInt_MInt_MInt > _&MInt__MINT_MInt_MInt_MInt > _xorMInt__MINT_MInt_MInt_MInt > _|MInt__MINT_MInt_MInt_MInt
  syntax associativity left _|MInt__MINT_MInt_MInt_MInt
  syntax associativity left _xorMInt__MINT_MInt_MInt_MInt
  syntax associativity left _<<MInt__MINT_MInt_MInt_MInt _>>aMInt__MINT_MInt_MInt_MInt _>>lMInt__MINT_MInt_MInt_MInt
  syntax associativity left _/sMInt__MINT_MInt_MInt_MInt _*MInt__MINT_MInt_MInt_MInt _/uMInt__MINT_MInt_MInt_MInt _%uMInt__MINT_MInt_MInt_MInt _%sMInt__MINT_MInt_MInt_MInt
  syntax associativity left _+MInt__MINT_MInt_MInt_MInt _-MInt__MINT_MInt_MInt_MInt
  syntax associativity left _&MInt__MINT_MInt_MInt_MInt
  syntax Int ::= "uminMInt" "(" Int ")" [function, klabel(uminMInt)]
  syntax Int ::= "umaxMInt" "(" Int ")" [function, klabel(umaxMInt)]
  syntax Int ::= "sminMInt" "(" Int ")" [function, klabel(sminMInt)]
  syntax Int ::= "smaxMInt" "(" Int ")" [function, klabel(smaxMInt)]
  syntax Bool ::= "uoverflowMInt" "(" Int "," Int ")" [function, klabel(uoverflowMInt)]
  syntax Bool ::= "soverflowMInt" "(" Int "," Int ")" [function, klabel(soverflowMInt)]
endmodule


module MINT-SYNTAX [org.kframework.attributes.Location(Location(2556,1,2563,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports MINT-SYNTAX$SYNTAX
endmodule


module MINT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(2556,1,2563,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax {Width} MInt{Width} ::= r"[\\+-]?[0-9]+[pP][0-9]+" [hook(MINT.literal), prec(2), token]
  syntax MInt{Width} [hook(MINT.MInt), org.kframework.attributes.Location(Location(2559,3,2559,46)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
endmodule


module ML-SYNTAX [org.kframework.attributes.Location(Location(137,1,164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  imports ML-SYNTAX$SYNTAX
endmodule


module ML-SYNTAX [org.kframework.attributes.Location(Location(137,1,164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  imports ML-SYNTAX$SYNTAX
endmodule


module ML-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(137,1,164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K$SYNTAX
  syntax {Sort} Sort ::= Sort "#Or" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#Or), left, mlOp, symbol, unit(#Bottom)]
  syntax {Sort} Sort ::= Sort "#Implies" Sort [format(%i%1%d%n%2%n%i%3%d), klabel(#Implies), mlImplies, mlOp, symbol]
  syntax {Sort} Sort ::= Sort "#And" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#And), left, mlAnd, mlOp, symbol, unit(#Top)]
  syntax {Sort} Sort ::= "#wEF" "(" Sort ")" [klabel(weakExistsFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#wAF" "(" Sort ")" [klabel(weakAlwaysFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#True" [klabel(#Top), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Top" [klabel(#Top), mlUnary, symbol]
  syntax {Sort} Sort ::= "#Not" "(" Sort ")" [klabel(#Not), mlOp, mlUnary, symbol]
  syntax {Sort} Sort ::= "#False" [klabel(#Bottom), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Bottom" [klabel(#Bottom), mlUnary, symbol]
  syntax {Sort} Sort ::= "#AG" "(" Sort ")" [klabel(#AG), mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "{" Sort1 "#Equals" Sort1 "}" [format(%1%i%n%2%d%n%3%i%n%4%d%n%5), klabel(#Equals), mlEquals, mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Forall" Sort1 "." Sort2 [klabel(#Forall), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Floor" "(" Sort1 ")" [klabel(#Floor), mlOp, mlUnary, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Exists" Sort1 "." Sort2 [klabel(#Exists), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Ceil" "(" Sort1 ")" [klabel(#Ceil), mlOp, mlUnary, symbol]
  syntax priority #Top #Floor #Ceil #Not #Bottom > #Equals > #And
  syntax priority #Implies > #Exists #Forall
  syntax priority #And > #Or > #Implies
  syntax associativity left #Or
  syntax associativity left #And
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module ML-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(137,1,164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K$SYNTAX
  syntax {Sort} Sort ::= Sort "#Or" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#Or), left, mlOp, symbol, unit(#Bottom)]
  syntax {Sort} Sort ::= Sort "#Implies" Sort [format(%i%1%d%n%2%n%i%3%d), klabel(#Implies), mlImplies, mlOp, symbol]
  syntax {Sort} Sort ::= Sort "#And" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#And), left, mlAnd, mlOp, symbol, unit(#Top)]
  syntax {Sort} Sort ::= "#wEF" "(" Sort ")" [klabel(weakExistsFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#wAF" "(" Sort ")" [klabel(weakAlwaysFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#True" [klabel(#Top), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Top" [klabel(#Top), mlUnary, symbol]
  syntax {Sort} Sort ::= "#Not" "(" Sort ")" [klabel(#Not), mlOp, mlUnary, symbol]
  syntax {Sort} Sort ::= "#False" [klabel(#Bottom), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Bottom" [klabel(#Bottom), mlUnary, symbol]
  syntax {Sort} Sort ::= "#AG" "(" Sort ")" [klabel(#AG), mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "{" Sort1 "#Equals" Sort1 "}" [format(%1%i%n%2%d%n%3%i%n%4%d%n%5), klabel(#Equals), mlEquals, mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Forall" Sort1 "." Sort2 [klabel(#Forall), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Floor" "(" Sort1 ")" [klabel(#Floor), mlOp, mlUnary, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Exists" Sort1 "." Sort2 [klabel(#Exists), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Ceil" "(" Sort1 ")" [klabel(#Ceil), mlOp, mlUnary, symbol]
  syntax priority #Top #Floor #Ceil #Not #Bottom > #Equals > #And
  syntax priority #Implies > #Exists #Forall
  syntax priority #And > #Or > #Implies
  syntax associativity left #Or
  syntax associativity left #And
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module PROGRAM-LISTS [org.kframework.attributes.Location(Location(396,1,408,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  imports PROGRAM-LISTS$SYNTAX
endmodule


module PROGRAM-LISTS$SYNTAX [org.kframework.attributes.Location(Location(396,1,408,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K$SYNTAX
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module RECORD-PRODUCTIONS [org.kframework.attributes.Location(Location(417,1,422,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RECORD-PRODUCTIONS$SYNTAX
endmodule


module RECORD-PRODUCTIONS$SYNTAX [org.kframework.attributes.Location(Location(417,1,422,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module REQUIRES-ENSURES [org.kframework.attributes.Location(Location(334,1,345,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports REQUIRES-ENSURES$SYNTAX
  imports BASIC-K
endmodule


module REQUIRES-ENSURES$SYNTAX [org.kframework.attributes.Location(Location(334,1,345,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports BASIC-K$SYNTAX
  syntax K
  syntax Bool ::= "is#RuleContent" "(" K ")" [function, predicate(#RuleContent)]
  syntax Bool ::= "is#RuleBody" "(" K ")" [function, predicate(#RuleBody)]
  syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]
  syntax #RuleContent ::= #RuleBody "when" Bool [klabel(#ruleRequires), symbol]
  syntax #RuleContent ::= #RuleBody "when" Bool "ensures" Bool [klabel(#ruleRequiresEnsures), symbol]
  syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]
  syntax #RuleContent ::= #RuleBody "requires" Bool "ensures" Bool [klabel(#ruleRequiresEnsures), symbol]
  syntax #RuleContent ::= #RuleBody "ensures" Bool [klabel(#ruleEnsures), symbol]
  syntax #RuleBody ::= K
endmodule


module RULE-CELLS [org.kframework.attributes.Location(Location(274,1,284,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RULE-LISTS
  imports RULE-CELLS$SYNTAX
  imports KCELLS
endmodule


module RULE-CELLS$SYNTAX [org.kframework.attributes.Location(Location(274,1,284,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RULE-LISTS$SYNTAX
  imports KCELLS$SYNTAX
  syntax K
  syntax Bool ::= "is#OptionalDots" "(" K ")" [function, predicate(#OptionalDots)]
  syntax #OptionalDots ::= "..." [klabel(#dots), symbol]
  syntax #OptionalDots ::= "" [klabel(#noDots), symbol]
endmodule


module RULE-LISTS [org.kframework.attributes.Location(Location(410,1,415,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RULE-LISTS$SYNTAX
endmodule


module RULE-LISTS$SYNTAX [org.kframework.attributes.Location(Location(410,1,415,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module RULE-TAG-SYNTAX [org.kframework.attributes.Location(Location(2766,1,2770,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports RULE-TAG-SYNTAX$SYNTAX
  imports BUILTIN-ID-TOKENS
endmodule


module RULE-TAG-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(2766,1,2770,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BUILTIN-ID-TOKENS$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#RuleTag" "(" K ")" [function, predicate(#RuleTag)]
  syntax #RuleTag ::= #LowerId [token]
endmodule


module SET [not-lr1, org.kframework.attributes.Location(Location(493,1,605,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SET$SYNTAX
  imports INT-SYNTAX
  imports BASIC-K
  rule `_|Set__SET_Set_Set_Set`(S1,S2)=>`_Set_`(S1,`Set:difference`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e9a710d8d1ca5c799420161879cbbff926de45a5bddd820d646f51d43eb67e62), contentStartColumn(8), contentStartLine(546), org.kframework.attributes.Location(Location(546,8,546,45)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module SET$SYNTAX [not-lr1, org.kframework.attributes.Location(Location(493,1,605,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _|Set__SET_Set_Set_Set
  syntax associativity left _Set_
  syntax Set [hook(SET.Set), org.kframework.attributes.Location(Location(497,3,497,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Set ::= Set Set [assoc, comm, element(SetItem), format(%1%n%2), function, functional, hook(SET.concat), idem, klabel(_Set_), left, symbol, unit(.Set)]
  syntax Set ::= Set "|Set" Set [function, functional, hook(SET.union), left]
  syntax Set ::= Set "-Set" Set [function, functional, hook(SET.difference), klabel(Set:difference), latex({#1}-_{\it Set}{#2}), symbol]
  syntax Set ::= "project:Set" "(" K ")" [function, projection]
  syntax Set ::= "intersectSet" "(" Set "," Set ")" [function, functional, hook(SET.intersection), klabel(intersectSet)]
  syntax Set ::= "SetItem" "(" KItem ")" [function, functional, hook(SET.element), klabel(SetItem), symbol]
  syntax Set ::= ".Set" [function, functional, hook(SET.unit), klabel(.Set), latex(\dotCt{Set}), symbol]
  syntax KItem ::= Set
  syntax KItem ::= "choice" "(" Set ")" [function, hook(SET.choice), klabel(Set:choice)]
  syntax K
  syntax Int ::= "size" "(" Set ")" [function, functional, hook(SET.size), klabel(size)]
  syntax Bool ::= Set "<=Set" Set [function, functional, hook(SET.inclusion)]
  syntax Bool ::= KItem "in" Set [function, functional, hook(SET.in), klabel(Set:in), symbol]
  syntax Bool ::= "isSet" "(" K ")" [function, predicate(Set)]
  rule `project:Set`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-BOOL [org.kframework.attributes.Location(Location(776,1,778,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SORT-BOOL$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
endmodule


module SORT-BOOL$SYNTAX [org.kframework.attributes.Location(Location(776,1,778,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool [hook(BOOL.Bool), org.kframework.attributes.Location(Location(777,3,777,31)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-BOOL$SYNTAX [org.kframework.attributes.Location(Location(776,1,778,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool [hook(BOOL.Bool), org.kframework.attributes.Location(Location(777,3,777,31)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-K [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K$SYNTAX
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module SORT-K [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K$SYNTAX
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module SORT-K$SYNTAX [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K [hook(K.K), org.kframework.attributes.Location(Location(27,3,27,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-K$SYNTAX [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K [hook(K.K), org.kframework.attributes.Location(Location(27,3,27,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-K$SYNTAX [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K [hook(K.K), org.kframework.attributes.Location(Location(27,3,27,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-KBOTT [org.kframework.attributes.Location(Location(67,1,70,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT$SYNTAX
  imports SORT-K
endmodule


module SORT-KBOTT [org.kframework.attributes.Location(Location(67,1,70,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT$SYNTAX
  imports SORT-K
endmodule


module SORT-KBOTT$SYNTAX [org.kframework.attributes.Location(Location(67,1,70,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K$SYNTAX
  syntax KBott [org.kframework.attributes.Location(Location(69,3,69,14)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K
  syntax Bool ::= "isKBott" "(" K ")" [function, predicate(KBott)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module SORT-KBOTT$SYNTAX [org.kframework.attributes.Location(Location(67,1,70,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K$SYNTAX
  syntax KBott [org.kframework.attributes.Location(Location(69,3,69,14)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K
  syntax Bool ::= "isKBott" "(" K ")" [function, predicate(KBott)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module SORT-PREDICATES [org.kframework.attributes.Location(Location(424,1,429,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES$SYNTAX
endmodule


module SORT-PREDICATES$SYNTAX [org.kframework.attributes.Location(Location(424,1,429,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module STDIN-STREAM [org.kframework.attributes.Location(Location(2373,1,2467,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
endmodule


module STDOUT-STREAM [org.kframework.attributes.Location(Location(2469,1,2537,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
endmodule


module STRING [org.kframework.attributes.Location(Location(1566,1,1570,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-KORE
  imports STRING-COMMON
  imports STRING$SYNTAX
endmodule


module STRING$SYNTAX [org.kframework.attributes.Location(Location(1566,1,1570,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-KORE$SYNTAX
  imports STRING-KAST$SYNTAX
  imports STRING-COMMON$SYNTAX
endmodule


module STRING-BUFFER$SYNTAX [org.kframework.attributes.Location(Location(1616,1,1619,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-BUFFER-IN-K$SYNTAX
endmodule


module STRING-BUFFER-IN-K$SYNTAX [org.kframework.attributes.Location(Location(1592,1,1604,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), symbolic]
  imports STRING$SYNTAX
  imports BASIC-K$SYNTAX
  syntax associativity left _+String__STRING-BUFFER-IN-K_StringBuffer_StringBuffer_String
  syntax StringBuffer ::= StringBuffer "+String" String [avoid, function, functional, left]
  syntax StringBuffer ::= String
  syntax StringBuffer ::= "project:StringBuffer" "(" K ")" [function, projection]
  syntax StringBuffer ::= ".StringBuffer" [function, functional]
  syntax String ::= "StringBuffer2String" "(" StringBuffer ")" [function, functional, klabel(StringBuffer2String)]
  syntax KItem ::= StringBuffer
  syntax K
  syntax Bool ::= "isStringBuffer" "(" K ")" [function, predicate(StringBuffer)]
  rule `project:StringBuffer`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module STRING-COMMON [org.kframework.attributes.Location(Location(1365,1,1548,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX
  imports STRING-COMMON$SYNTAX
  imports K-EQUAL
  imports INT
  imports FLOAT-SYNTAX
  rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(23b9fa88124c547d94aed32124d1ccd1069732b059f4c8b430ab4617979690f6), contentStartColumn(8), contentStartLine(1527), org.kframework.attributes.Location(Location(1527,8,1527,33)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT-COMMON_Int_Int_Int`(`rfindString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(b7f740050d72a847424b022a9c8217325aba8a154a42831aa3c7a3b0727f3205), contentStartColumn(8), contentStartLine(1526), org.kframework.attributes.Location(Location(1526,8,1526,182)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,_0)=>Source requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(8fbd1c8efb9988236eddc95fc2af4a3e74f6ec94d696ee47209543fd0826dd34), contentStartColumn(8), contentStartLine(1537), org.kframework.attributes.Location(Location(1537,8,1538,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source))) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(e290042e5b5b2f620c0ca1871e708c3713c62b63b283e317bb7568e13968fe0c), contentStartColumn(8), contentStartLine(1534), org.kframework.attributes.Location(Location(1534,8,1536,66)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceAll(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(262167183c3ec2e214d12bac6e639d7ac1a9f973582e16eca6c1af1da7ecc0a5), contentStartColumn(8), contentStartLine(1546), org.kframework.attributes.Location(Location(1546,8,1546,154)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,_0,_1,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4367434b0f61c404f7a2e926426bd23874dd547de689c5d15089967fbab2b3d5), contentStartColumn(8), contentStartLine(1545), org.kframework.attributes.Location(Location(1545,8,1545,49)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToReplace,Replacement,`_-Int_`(Count,#token("1","Int")))) requires `_>Int_`(Count,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(311b80d2cb12d368f230eba968464e1fc926bd57e304059b282b82af4d9626d9), contentStartColumn(8), contentStartLine(1541), org.kframework.attributes.Location(Location(1541,8,1544,30)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5a6cf981f0ec2494854cd3e517b0cf645a1c9762c92a14849adfca9a6a553117), contentStartColumn(8), contentStartLine(1525), org.kframework.attributes.Location(Location(1525,8,1525,32)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(`_==Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(`_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT-COMMON_Int_Int_Int`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)))) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(9a3b7d1924363894c859ceb6bcec34fb944f01a5e0c90679d41b8430990b7295), contentStartColumn(8), contentStartLine(1524), org.kframework.attributes.Location(Location(1524,8,1524,431)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToCount)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToCount)) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(628cff029a6d79e4c99999c0309f91ab8cb12f0ba549bb3faa850f96304c970e), contentStartColumn(8), contentStartLine(1531), org.kframework.attributes.Location(Location(1531,8,1532,60)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(1c726cd81629c2e5f411539a7f9b4d297e8600e5d71a5d235d287e3001f3ec84), contentStartColumn(8), contentStartLine(1529), org.kframework.attributes.Location(Location(1529,8,1530,59)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `_>String__STRING-COMMON_Bool_String_String`(S1,S2)=>`_<String__STRING-COMMON_Bool_String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e5353c0a58491f8613ad7a35d0833206c342df0c91773e42485e52f4dad0cd0), contentStartColumn(8), contentStartLine(1521), org.kframework.attributes.Location(Location(1521,8,1521,52)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_>=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b376ffb0925555ed27696d73fc8fe43306e2005e4cf6ad819e860958992f9f17), contentStartColumn(8), contentStartLine(1522), org.kframework.attributes.Location(Location(1522,8,1522,63)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_=/=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_==String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f390a9b650f3de0e3a93773a46e65aae3decdeb2a10906058f204f031681c9b7), contentStartColumn(8), contentStartLine(1500), org.kframework.attributes.Location(Location(1500,8,1500,65)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_<=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9e50fb4dcba1212ee863c170298cb8b555f39fb3b4bcb649f3d1d8e321accc80), contentStartColumn(8), contentStartLine(1520), org.kframework.attributes.Location(Location(1520,8,1520,63)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module STRING-COMMON$SYNTAX [org.kframework.attributes.Location(Location(1365,1,1548,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX$SYNTAX
  imports K-EQUAL$SYNTAX
  imports INT$SYNTAX
  imports FLOAT-SYNTAX$SYNTAX
  syntax associativity left _==String__STRING-COMMON_Bool_String_String
  syntax associativity left _=/=String__STRING-COMMON_Bool_String_String
  syntax associativity left _+String__STRING-COMMON_String_String_String
  syntax String ::= String "+String" String [function, functional, hook(STRING.concat), latex({#1}+_{\scriptstyle\it String}{#2}), left]
  syntax String ::= "substrString" "(" String "," Int "," Int ")" [function, functional, hook(STRING.substr), klabel(substrString)]
  syntax String ::= "replaceFirst" "(" String "," String "," String ")" [function, functional, hook(STRING.replaceFirst)]
  syntax String ::= "replaceAll" "(" String "," String "," String ")" [function, functional, hook(STRING.replaceAll)]
  syntax String ::= "replace" "(" String "," String "," String "," Int ")" [function, hook(STRING.replace)]
  syntax String ::= "newUUID" [function, hook(STRING.uuid), impure]
  syntax String ::= "directionalityChar" "(" String ")" [function, hook(STRING.directionality), klabel(directionalityChar)]
  syntax String ::= "chrChar" "(" Int ")" [function, hook(STRING.chr), klabel(chrChar)]
  syntax String ::= "categoryChar" "(" String ")" [function, hook(STRING.category), klabel(categoryChar)]
  syntax String ::= "Int2String" "(" Int ")" [function, functional, hook(STRING.int2string), klabel(Int2String)]
  syntax String ::= "Float2String" "(" Float "," String ")" [function, hook(STRING.floatFormat), klabel(FloatFormat)]
  syntax String ::= "Float2String" "(" Float ")" [function, functional, hook(STRING.float2string), klabel(Float2String)]
  syntax String ::= "Base2String" "(" Int "," Int ")" [function, hook(STRING.base2string), klabel(Base2String)]
  syntax Int ::= "rfindString" "(" String "," String "," Int ")" [function, hook(STRING.rfind), klabel(rfindString)]
  syntax Int ::= "rfindChar" "(" String "," String "," Int ")" [function, hook(STRING.rfindChar), klabel(rfindChar)]
  syntax Int ::= "ordChar" "(" String ")" [function, hook(STRING.ord), klabel(ordChar)]
  syntax Int ::= "lengthString" "(" String ")" [function, functional, hook(STRING.length), klabel(lengthString)]
  syntax Int ::= "findString" "(" String "," String "," Int ")" [function, hook(STRING.find), klabel(findString)]
  syntax Int ::= "findChar" "(" String "," String "," Int ")" [function, hook(STRING.findChar), klabel(findChar)]
  syntax Int ::= "countAllOccurrences" "(" String "," String ")" [function, functional, hook(STRING.countAllOccurrences)]
  syntax Int ::= "String2Int" "(" String ")" [function, hook(STRING.string2int), klabel(String2Int)]
  syntax Int ::= "String2Base" "(" String "," Int ")" [function, hook(STRING.string2base), klabel(String2Base)]
  syntax Float ::= "String2Float" "(" String ")" [function, hook(STRING.string2float), klabel(String2Float)]
  syntax Bool ::= String ">String" String [function, functional, hook(STRING.gt)]
  syntax Bool ::= String ">=String" String [function, functional, hook(STRING.ge)]
  syntax Bool ::= String "==String" String [function, functional, hook(STRING.eq), left]
  syntax Bool ::= String "=/=String" String [function, functional, hook(STRING.ne), left]
  syntax Bool ::= String "<String" String [function, functional, hook(STRING.lt)]
  syntax Bool ::= String "<=String" String [function, functional, hook(STRING.le)]
endmodule


module STRING-KAST$SYNTAX [kast, org.kframework.attributes.Location(Location(1550,1,1556,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-COMMON$SYNTAX
  imports K-EQUAL$SYNTAX
endmodule


module STRING-KORE [kore, org.kframework.attributes.Location(Location(1558,1,1564,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-KORE$SYNTAX
  imports STRING-COMMON
  imports K-EQUAL
  rule `_==K_`(S1,S2)=>`_==String__STRING-COMMON_Bool_String_String`(S1,S2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(512288fc69c52cbd01cf38881d419b391f66a3d428beddb746e0012a9f880325), contentStartColumn(8), contentStartLine(1562), org.kframework.attributes.Location(Location(1562,8,1562,49)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module STRING-KORE$SYNTAX [kore, org.kframework.attributes.Location(Location(1558,1,1564,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-COMMON$SYNTAX
  imports K-EQUAL$SYNTAX
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(1360,1,1363,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(1360,1,1363,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module STRING-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1360,1,1363,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String [hook(STRING.String), org.kframework.attributes.Location(Location(1361,3,1361,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax String ::= "project:String" "(" K ")" [function, projection]
  syntax KItem ::= String
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isString" "(" K ")" [function, predicate(String)]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:String`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module STRING-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1360,1,1363,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String [hook(STRING.String), org.kframework.attributes.Location(Location(1361,3,1361,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax String ::= "project:String" "(" K ")" [function, projection]
  syntax KItem ::= String
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isString" "(" K ")" [function, predicate(String)]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:String`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module STRING-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(1360,1,1363,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String [hook(STRING.String), org.kframework.attributes.Location(Location(1361,3,1361,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax String ::= "project:String" "(" K ")" [function, projection]
  syntax KItem ::= String
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isString" "(" K ")" [function, predicate(String)]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:String`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module UNISWAPV2 [org.kframework.attributes.Location(Location(15,1,58,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k))]
  imports UNISWAPV2-SYNTAX
  imports UNISWAPV2$SYNTAX
  imports MAP
  imports EXECUTION
  rule `<generatedTop>`(`<k>`(`` `exec(_)_EXECUTION-SYNTAX_Executable_ETHTransaction`(`_removes__and__ofliquidity_UNISWAPV2-SYNTAX_UniswapV2TX_ETHAddress_Int_ETHAddress_Int_ETHAddress`(LiquidityProvider,Amount0,Token0,Amount1,Token1))=>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),Token0,`_-Int_`(#token("0","Int"),Amount0))~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),Token1,`_-Int_`(#token("0","Int"),Amount1))~>`GetPrice___UNISWAPV2-SYNTAX_InternalCmd_ETHAddress_ETHAddress`(Token0,Token1)``~>_DotVar1),_0,_1,`<B>`(`_List_`(_DotVar2,`.List`(.KList)=>`ListItem`(`_removes__and__ofliquidity_UNISWAPV2-SYNTAX_UniswapV2TX_ETHAddress_Int_ETHAddress_Int_ETHAddress`(LiquidityProvider,Amount0,Token0,Amount1,Token1)))),_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e91de5664152169f6942b682603a222a0ee9218d09590f07be45de6a3cf6fce), contentStartColumn(10), contentStartLine(45), org.kframework.attributes.Location(Location(45,10,50,114)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`` `exec(_)_EXECUTION-SYNTAX_Executable_ETHTransaction`(`_fee__EXECUTION-SYNTAX_ETHTransaction_ETHTransaction_Int`(`_swapsfor_byproviding__and__withchange__UNISWAPV2-SYNTAX_UniswapV2TX_ETHAddress_ETHAddress_Int_ETHAddress_Int_ETHAddress_Int`(Address,TokenOut,AmountInTokenIn,TokenIn,AmountInTokenOut,TokenOut,AmountOutTokenIn),GasFee))=>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,TokenIn,`_-Int_`(#token("0","Int"),AmountInTokenIn))~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),TokenIn,AmountInTokenIn)~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,TokenOut,`_-Int_`(#token("0","Int"),AmountInTokenOut))~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),TokenOut,AmountInTokenOut)~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,TokenIn,AmountOutTokenIn)~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),TokenIn,`_-Int_`(#token("0","Int"),AmountOutTokenIn))~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,TokenOut,`_+Int_`(`_/Int_`(`_*Int_`(`_-Int_`(`_*Int_`(#token("997","Int"),AmountInTokenIn),`_*Int_`(#token("1000","Int"),AmountOutTokenIn)),USwapV2BalanceOut),`_+Int_`(`_*Int_`(#token("1000","Int"),`_-Int_`(USwapV2BalanceIn,AmountOutTokenIn)),`_*Int_`(#token("997","Int"),AmountInTokenIn))),`_/Int_`(`_*Int_`(AmountInTokenOut,#token("997","Int")),#token("1000","Int"))))~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),TokenOut,`_-Int_`(#token("0","Int"),`_+Int_`(`_/Int_`(`_*Int_`(`_-Int_`(`_*Int_`(#token("997","Int"),AmountInTokenIn),`_*Int_`(#token("1000","Int"),AmountOutTokenIn)),USwapV2BalanceOut),`_+Int_`(`_*Int_`(#token("1000","Int"),`_-Int_`(USwapV2BalanceIn,AmountOutTokenIn)),`_*Int_`(#token("997","Int"),AmountInTokenIn))),`_/Int_`(`_*Int_`(AmountInTokenOut,#token("997","Int")),#token("1000","Int")))))~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(Address,#token("0","Int"),`_-Int_`(#token("0","Int"),GasFee))~>`GetPrice___UNISWAPV2-SYNTAX_InternalCmd_ETHAddress_ETHAddress`(TokenIn,TokenOut)``~>_DotVar1),_0,`<S>`(`_Map_`(`_Map_`(`_|->_`(`_in__EXECUTION-SYNTAX_BalanceEntry_ETHAddress_ETHAddress`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),TokenOut),USwapV2BalanceOut),`_|->_`(`_in__EXECUTION-SYNTAX_BalanceEntry_ETHAddress_ETHAddress`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),TokenIn),USwapV2BalanceIn)),_DotVar2)),`<B>`(`_List_`(_DotVar3,`.List`(.KList)=>`ListItem`(`_fee__EXECUTION-SYNTAX_ETHTransaction_ETHTransaction_Int`(`_swapsfor_byproviding__and__withchange__UNISWAPV2-SYNTAX_UniswapV2TX_ETHAddress_ETHAddress_Int_ETHAddress_Int_ETHAddress_Int`(Address,TokenOut,AmountInTokenIn,TokenIn,AmountInTokenOut,TokenOut,AmountOutTokenIn),GasFee)))),_1,_2,_3,_4,_5) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(78a0ee47cb203f7ab029ea2251901a02b4be16088d7fa7db82e8fb6ac5646d9e), contentStartColumn(10), contentStartLine(19), org.kframework.attributes.Location(Location(19,10,33,175)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`` `exec(_)_EXECUTION-SYNTAX_Executable_ETHTransaction`(`_adds__and__ofliquidity_UNISWAPV2-SYNTAX_UniswapV2TX_ETHAddress_Int_ETHAddress_Int_ETHAddress`(LiquidityProvider,Amount0,Token0,Amount1,Token1))=>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),Token0,Amount0)~>`_in_gets__EXECUTION-SYNTAX_Statement_ETHAddress_ETHAddress_Int`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),Token1,Amount1)~>`GetPrice___UNISWAPV2-SYNTAX_InternalCmd_ETHAddress_ETHAddress`(Token0,Token1)``~>_DotVar1),_0,_1,`<B>`(`_List_`(_DotVar2,`.List`(.KList)=>`ListItem`(`_adds__and__ofliquidity_UNISWAPV2-SYNTAX_UniswapV2TX_ETHAddress_Int_ETHAddress_Int_ETHAddress`(LiquidityProvider,Amount0,Token0,Amount1,Token1)))),_2,_3,_4,_5,_6) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c96f7e1a0abd1347a79e30e48ca248cb193445dd41adfb301e10551d34af5347), contentStartColumn(10), contentStartLine(38), org.kframework.attributes.Location(Location(38,10,43,111)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `<generatedTop>`(`<k>`(`` `GetPrice___UNISWAPV2-SYNTAX_InternalCmd_ETHAddress_ETHAddress`(Token0,Token1)=>.K``~>_DotVar1),_0,`<S>`(`_Map_`(`_Map_`(`_|->_`(`_in__EXECUTION-SYNTAX_BalanceEntry_ETHAddress_ETHAddress`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),Token0),Qty0),`_|->_`(`_in__EXECUTION-SYNTAX_BalanceEntry_ETHAddress_ETHAddress`(`UniswapV2_UNISWAPV2-SYNTAX_ETHAddress`(.KList),Token1),Qty1)),_DotVar3)),`<B>`(`_List_`(_DotVar2,`.List`(.KList)=>`ListItem`(`GetPrice___UNISWAPV2-SYNTAX_InternalCmd_ETHAddress_ETHAddress`(Token0,Token1)))),`<P>`(Px=>`Map:update`(`Map:update`(Px,`_,__UNISWAPV2-SYNTAX_CurrencyPair_ETHAddress_ETHAddress`(Token0,Token1),`_/Int_`(Qty1,Qty0)),`_,__UNISWAPV2-SYNTAX_CurrencyPair_ETHAddress_ETHAddress`(Token1,Token0),`_/Int_`(Qty0,Qty1))),_1,_2,_3,_4) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(999413d28935b07d8fbb96c4097ce84fe8c46b9d37810d2856b2f04636ddd0a2), contentStartColumn(10), contentStartLine(52), org.kframework.attributes.Location(Location(52,10,55,105)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module UNISWAPV2$SYNTAX [org.kframework.attributes.Location(Location(15,1,58,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k))]
  imports UNISWAPV2-SYNTAX$SYNTAX
  imports EXECUTION$SYNTAX
endmodule


module UNISWAPV2-SYNTAX [org.kframework.attributes.Location(Location(3,1,13,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k))]
  imports UNISWAPV2-SYNTAX$SYNTAX
  imports EXECUTION-SYNTAX
endmodule


module UNISWAPV2-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(3,1,13,9)), org.kframework.attributes.Source(Source(/home/sasha/sasha_mev/mev/./uniswapv2.k))]
  imports EXECUTION-SYNTAX$SYNTAX
  syntax UniswapV2TX ::= ETHAddress "swaps for" ETHAddress "by providing" Int ETHAddress "and" Int ETHAddress "with change" Int
  syntax UniswapV2TX ::= ETHAddress "removes" Int ETHAddress "and" Int ETHAddress "of liquidity"
  syntax UniswapV2TX ::= ETHAddress "adds" Int ETHAddress "and" Int ETHAddress "of liquidity"
  syntax UniswapV2TX ::= "project:UniswapV2TX" "(" K ")" [function, projection]
  syntax Statement ::= InternalCmd
  syntax KItem ::= UniswapV2TX
  syntax KItem ::= InternalCmd
  syntax KItem ::= CurrencyPair
  syntax K
  syntax InternalCmd ::= "project:InternalCmd" "(" K ")" [function, projection]
  syntax InternalCmd ::= "GetPrice" ETHAddress ETHAddress
  syntax ETHTransaction ::= UniswapV2TX
  syntax ETHAddress ::= "UniswapV2"
  syntax CurrencyPair ::= ETHAddress "," ETHAddress
  syntax CurrencyPair ::= "project:CurrencyPair" "(" K ")" [function, projection]
  syntax Bool ::= "isUniswapV2TX" "(" K ")" [function, predicate(UniswapV2TX)]
  syntax Bool ::= "isInternalCmd" "(" K ")" [function, predicate(InternalCmd)]
  syntax Bool ::= "isCurrencyPair" "(" K ")" [function, predicate(CurrencyPair)]
  rule `project:UniswapV2TX`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:InternalCmd`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:CurrencyPair`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(878,1,881,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(878,1,881,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX$SYNTAX
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module UNSIGNED-INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(878,1,881,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Int
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Int [hook(INT.Int), org.kframework.attributes.Location(Location(879,3,879,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Int ::= r"[0-9]+" [prec(2), prefer, token]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module UNSIGNED-INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(878,1,881,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Int
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Int [hook(INT.Int), org.kframework.attributes.Location(Location(879,3,879,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Int ::= r"[0-9]+" [prec(2), prefer, token]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module UNSIGNED-INT-SYNTAX$SYNTAX [org.kframework.attributes.Location(Location(878,1,881,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Int
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Int [hook(INT.Int), org.kframework.attributes.Location(Location(879,3,879,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Int ::= r"[0-9]+" [prec(2), prefer, token]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule